<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>文本处理工具和正则表达式</title>
    <link href="/2022/07/26/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/07/26/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-文本编辑工具之神VIM"><a href="#1-文本编辑工具之神VIM" class="headerlink" title="1.文本编辑工具之神VIM"></a>1.文本编辑工具之神VIM</h1><h2 id="1-1使用vim初步"><a href="#1-1使用vim初步" class="headerlink" title="1.1使用vim初步"></a>1.1使用vim初步</h2><h3 id="1-1-1vim命令格式"><a href="#1-1-1vim命令格式" class="headerlink" title="1.1.1vim命令格式"></a>1.1.1vim命令格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 常用">vim [option]··· FILE ···<br></code></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">+# 打开文件后，让光标处于第#行的行首，+默认行尾<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> +<span class="hljs-number">10</span> passwd<br></code></pre></td></tr></table></figure><p><img src="/../img/1658842039807.png" alt="1658842039807"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">+/PATTERN 让光标处于第一个被PATTERN匹配到的行行首<br>-<span class="hljs-keyword">b</span> <span class="hljs-keyword">file</span> 二进制方式打开文件<br>-d file1 file2… 比较多个文件，相当于 vimdiff<br>-<span class="hljs-keyword">m</span> <span class="hljs-keyword">file</span> 只读打开文件<br>-<span class="hljs-keyword">e</span> <span class="hljs-keyword">file</span> 直接进入<span class="hljs-keyword">ex</span>模式，相当于执行<span class="hljs-keyword">ex</span> <span class="hljs-keyword">file</span><br>-<span class="hljs-keyword">y</span> <span class="hljs-keyword">file</span> Easy <span class="hljs-keyword">mode</span> (like <span class="hljs-string">&quot;evim&quot;</span>, modeless)，直接可以操作文件，ctrl+<span class="hljs-keyword">o</span>:<span class="hljs-keyword">wq</span>|q! 保存和不<br>保存退出<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>如果该文件存在，文件被打开并显示内容</li><li>如果该文件不存在，当编辑后第一次存盘时创建它</li></ul><h3 id="1-1-2三种主要模式"><a href="#1-1-2三种主要模式" class="headerlink" title="1.1.2三种主要模式"></a>1.1.2三种主要模式</h3><p>三种常见模式：</p><ul><li><p>命令或普通(Normal)模式：默认模式，可以实现移动光标，剪切&#x2F;粘贴文本</p></li><li><p>插入(Insert)或编辑模式：用于修改文本</p></li><li><p>扩展命令(extended command )或命令(末)行模式：保存，退出等</p></li><li><p>命令模式–》插入模式</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> insert, 在光标所在处输入<br><span class="hljs-selector-tag">I</span> 在当前光标所在行的行首输入<br><span class="hljs-selector-tag">a</span> append, 在光标所在处后面输入<br><span class="hljs-selector-tag">A</span> 在当前光标所在行的行尾输入<br>o 在当前光标所在行的下方打开一个新行<br>O 在当前光标所在行的上方打开一个新行<br></code></pre></td></tr></table></figure><ul><li>插入模式 — ESC—–&gt; 命令模式</li><li>命令模式 —- : —-&gt; 扩展命令模式</li><li>扩展命令模式 —-ESC,enter—-&gt; 命令模式</li></ul><p>范例: 插入颜色字符</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>切换至插入模式<br><span class="hljs-symbol">2 </span>按ctrl+v+[ 三个键,显示^[<br><span class="hljs-symbol">3 </span>后续输入颜色信息,如:^[[<span class="hljs-number">32</span>mhello^[[<span class="hljs-number">0</span>m<br><span class="hljs-symbol">4 </span>切换至扩展命令模式,保存退出<br><span class="hljs-symbol">5 </span>cat 文件可以看到下面显示<br></code></pre></td></tr></table></figure><p><img src="/../img/1658842714254.png" alt="1658842714254"></p><p><img src="/../img/1658842736134.png" alt="1658842736134"></p><h2 id="1-2扩展命令模式"><a href="#1-2扩展命令模式" class="headerlink" title="1.2扩展命令模式"></a>1.2扩展命令模式</h2><p>按“:”（冒号）进入Ex模式，创建一个命令提示符：处于底部的屏幕左侧</p><h3 id="1-2-1扩展模式基本命令"><a href="#1-2-1扩展模式基本命令" class="headerlink" title="1.2.1扩展模式基本命令"></a>1.2.1扩展模式基本命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">w 写（存）磁盘文件<br>wq 写入并退出<br>x 写入并退出<br>X 加密<br><span class="hljs-selector-tag">q</span> 退出<br><span class="hljs-selector-tag">q</span>！ 不存盘退出，即使更改都将丢失<br></code></pre></td></tr></table></figure><ul><li>读取文件内容到当前文件中</li></ul><p>用法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">r</span> filename<span class="hljs-comment"># 读文件内容到当前文件中</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"># 将当前目录下的<span class="hljs-selector-tag">b</span>文件的内容读取到当前文件中<br><span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span><br>:<span class="hljs-selector-tag">r</span> <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><ul><li>将当前文件内容写入另一个文件</li></ul><p>用法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">w</span> filename <span class="hljs-comment"># 将当前文件内容写入另一个文件</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"># 将当前文件(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>文件)内容写入到<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.txt</span>中去<br>vim <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span><br>w c<span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><ul><li>执行命令</li></ul><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">!<span class="hljs-built_in">command</span><span class="hljs-comment">#执行命令</span><br></code></pre></td></tr></table></figure><p>范例：</p><p><img src="/../img/1658844469691.png" alt="1658844469691"></p><ul><li>读入命令的输入</li></ul><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">r!<span class="hljs-built_in">command</span><span class="hljs-comment">#读入命令的输入</span><br></code></pre></td></tr></table></figure><p>范例：执行hostname命令输入到当前文件中</p><p><img src="/../img/1658844624368.png" alt="1658844624368"></p><h3 id="1-2-2地址定界"><a href="#1-2-2地址定界" class="headerlink" title="1.2.2地址定界"></a>1.2.2地址定界</h3><p>格式：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">:start_pos,end_pos <span class="hljs-keyword">CMD</span><br></code></pre></td></tr></table></figure><h4 id="1-2-2-1地址定界格式"><a href="#1-2-2-1地址定界格式" class="headerlink" title="1.2.2.1地址定界格式"></a>1.2.2.1地址定界格式</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"># #具体第#行，例如<span class="hljs-number">2</span>表示第<span class="hljs-number">2</span>行<br>#,# #从左侧#表示起始行，到右侧#表示结尾行<br>#,+# #从左侧#表示的起始行，加上右侧#表示的行数，范例：<span class="hljs-number">2</span>,+<span class="hljs-number">3</span> 表示<span class="hljs-number">2</span>到<span class="hljs-number">5</span>行<br>. #当前行<br>$ #最后一行<br>.,$<span class="hljs-number">-1</span> #当前行到倒数第二行<br>% #全文, 相当于<span class="hljs-number">1</span>,$<br>/pattern/ #从当前行向下查找，直到匹配pattern的第一行,即:正则表达式<br>/pat1/,/pat2/ #从第一次被pat1模式匹配到的行开始，一直到第一次被pat2匹配到的行结束<br>#,/pat/ #从指定行开始，一直找到第一个匹配pattern的行结束<br>/pat/,$ #向下找到第一个匹配patttern的行到整个文件的结尾的所有行<br></code></pre></td></tr></table></figure><h4 id="1-2-2-2地址定界后跟一个编辑命令"><a href="#1-2-2-2地址定界后跟一个编辑命令" class="headerlink" title="1.2.2.2地址定界后跟一个编辑命令"></a>1.2.2.2地址定界后跟一个编辑命令</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">d <span class="hljs-comment">#删除</span><br>y <span class="hljs-comment">#复制</span><br>w <span class="hljs-built_in">file</span> <span class="hljs-comment">#将范围内的行另存至指定文件中</span><br>r <span class="hljs-built_in">file</span> <span class="hljs-comment">#在指定位置插入指定文件中的所有内容</span><br>t<span class="hljs-comment">#行号 将前面指定的行复制到#行后</span><br>m<span class="hljs-comment">#行号 将前面指定的行移动到#行后</span><br></code></pre></td></tr></table></figure><p>范例：</p><ul><li>删除文件内容第几行到第几行</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">:<span class="hljs-number">1</span>,<span class="hljs-number">3</span>d    <span class="hljs-meta">#删除第一行到第三行</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658925029163.png" alt="1658925029163"></p><ul><li>复制文件全部内容</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">:.,$y<br><span class="hljs-meta"># 通过键盘上下键选择要复制在什么地方，选择后位置后按p键复制</span><br></code></pre></td></tr></table></figure><ul><li>删除文件全部内容</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%d</span><br></code></pre></td></tr></table></figure><h3 id="1-2-3查找和替换"><a href="#1-2-3查找和替换" class="headerlink" title="1.2.3查找和替换"></a>1.2.3查找和替换</h3><p>格式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">s<span class="hljs-regexp">/查找的内容/</span>替换为内容/修饰符<br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">要查找的内容：可使用基本正则表达式模式<br>替换为的内容：不能使用模式，但可以使用<span class="hljs-string">\1,</span> <span class="hljs-string">\2,</span> ...等后向引用符号；还可以使用“&amp;”引用前面查找时查<br>找到的整个内容<br></code></pre></td></tr></table></figure><p>修饰符：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">i</span> <span class="hljs-comment">#忽略大小写</span><br>g <span class="hljs-comment">#全局替换，默认情况下，每一行只替换第一次出现</span><br>gc <span class="hljs-comment">#全局替换，每次替换前询问</span><br></code></pre></td></tr></table></figure><p>查找替换中的分隔符&#x2F;可替换为其它字符，如：#,@<br>范例：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">s<span class="hljs-meta">@/etc</span><span class="hljs-meta">@/var</span><span class="hljs-meta">@g</span><br>s<span class="hljs-comment">#/boot#/#i</span><br></code></pre></td></tr></table></figure><ul><li>复制&#x2F;etc&#x2F;passwd到家目录下，将文件内的root全部替换为ROOT</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:%s/root/ROOT/g<br></code></pre></td></tr></table></figure><h3 id="1-2-4定制vim的工作特性"><a href="#1-2-4定制vim的工作特性" class="headerlink" title="1.2.4定制vim的工作特性"></a>1.2.4定制vim的工作特性</h3><p>扩展命令模式的配置只是对当前vim进程有效，可将配置存放在文件中持久保存<br>配置文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>vimrc <span class="hljs-comment">#全局</span><br>~/.vimrc <span class="hljs-comment">#个人</span><br></code></pre></td></tr></table></figure><h4 id="1-2-4-1行号"><a href="#1-2-4-1行号" class="headerlink" title="1.2.4.1行号"></a>1.2.4.1行号</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">显示：<span class="hljs-built_in">set</span> number，简写 <span class="hljs-built_in">set</span> nu<br>取消显示：<span class="hljs-built_in">set</span> nonumber, 简写 <span class="hljs-built_in">set</span> nonu<br></code></pre></td></tr></table></figure><p><img src="/../img/1658926795326.png" alt="1658926795326"></p><h4 id="1-2-4-2忽略字符的大小写"><a href="#1-2-4-2忽略字符的大小写" class="headerlink" title="1.2.4.2忽略字符的大小写"></a>1.2.4.2忽略字符的大小写</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> ignorecase，简写 <span class="hljs-built_in">set</span> ic<br>不忽略：<span class="hljs-built_in">set</span> noic<br></code></pre></td></tr></table></figure><h4 id="1-2-4-3自动缩进"><a href="#1-2-4-3自动缩进" class="headerlink" title="1.2.4.3自动缩进"></a>1.2.4.3自动缩进</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> autoindent，简写 <span class="hljs-built_in">set</span> ai<br>禁用：<span class="hljs-built_in">set</span> noai<br></code></pre></td></tr></table></figure><h4 id="1-2-4-4复制保留格式"><a href="#1-2-4-4复制保留格式" class="headerlink" title="1.2.4.4复制保留格式"></a>1.2.4.4复制保留格式</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> paste<br>禁用：<span class="hljs-built_in">set</span> nopaste<br></code></pre></td></tr></table></figure><h4 id="1-2-4-5显示Tab-I和换行符-和-显示"><a href="#1-2-4-5显示Tab-I和换行符-和-显示" class="headerlink" title="1.2.4.5显示Tab ^I和换行符 和$显示"></a>1.2.4.5显示Tab ^I和换行符 和$显示</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> list<br>禁用：<span class="hljs-built_in">set</span> nolist<br></code></pre></td></tr></table></figure><h4 id="1-2-4-6高亮搜索"><a href="#1-2-4-6高亮搜索" class="headerlink" title="1.2.4.6高亮搜索"></a>1.2.4.6高亮搜索</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> hlsearch<br>禁用：<span class="hljs-built_in">set</span> nohlsearch 简写：nohl<br></code></pre></td></tr></table></figure><h4 id="1-2-4-7语法高亮"><a href="#1-2-4-7语法高亮" class="headerlink" title="1.2.4.7语法高亮"></a>1.2.4.7语法高亮</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">启用：<span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br>禁用：<span class="hljs-keyword">syntax</span> off<br></code></pre></td></tr></table></figure><h4 id="1-2-4-8文件格式"><a href="#1-2-4-8文件格式" class="headerlink" title="1.2.4.8文件格式"></a>1.2.4.8文件格式</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用windows格式：<span class="hljs-built_in">set</span> <span class="hljs-attribute">fileformat</span>=dos<br>启用unix格式：<span class="hljs-built_in">set</span> <span class="hljs-attribute">fileformat</span>=unix<br>简写 <span class="hljs-built_in">set</span> <span class="hljs-attribute">ff</span>=dos|unix<br></code></pre></td></tr></table></figure><h4 id="1-2-4-9Tab-用空格代替"><a href="#1-2-4-9Tab-用空格代替" class="headerlink" title="1.2.4.9Tab 用空格代替"></a>1.2.4.9Tab 用空格代替</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">启用：<span class="hljs-keyword">set</span> expandtab 默认为<span class="hljs-comment">8</span>个空格代替<span class="hljs-comment">Tab</span><br>禁用：<span class="hljs-keyword">set</span> <span class="hljs-comment">noexpandtab</span><br>简写：<span class="hljs-keyword">set</span> <span class="hljs-comment">et</span><br></code></pre></td></tr></table></figure><h4 id="1-2-4-10Tab用指定空格的个数代替"><a href="#1-2-4-10Tab用指定空格的个数代替" class="headerlink" title="1.2.4.10Tab用指定空格的个数代替"></a>1.2.4.10Tab用指定空格的个数代替</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> <span class="hljs-attribute">tabstop</span>=# 指定#个空格代替Tab<br>简写：<span class="hljs-built_in">set</span> <span class="hljs-attribute">ts</span>=4<br></code></pre></td></tr></table></figure><h4 id="1-2-4-11设置缩进宽度"><a href="#1-2-4-11设置缩进宽度" class="headerlink" title="1.2.4.11设置缩进宽度"></a>1.2.4.11设置缩进宽度</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#向右缩进 命令模式&gt;&gt;</span><br><span class="hljs-comment">#向左缩进 命令模式&lt;&lt;</span><br><span class="hljs-comment">#设置缩进为4个字符</span><br><span class="hljs-built_in">set</span> <span class="hljs-attribute">shiftwidth</span>=4<br></code></pre></td></tr></table></figure><h4 id="1-2-4-12设置文本宽度"><a href="#1-2-4-12设置文本宽度" class="headerlink" title="1.2.4.12设置文本宽度"></a>1.2.4.12设置文本宽度</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">textwidth</span>=65 (vim only) #从左向右计数<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">wrapmargin</span>=15 #从右到左计数<br></code></pre></td></tr></table></figure><h4 id="1-2-4-13-设置光标所在行的标识线"><a href="#1-2-4-13-设置光标所在行的标识线" class="headerlink" title="1.2.4.13 设置光标所在行的标识线"></a>1.2.4.13 设置光标所在行的标识线</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> cursorline，简写 <span class="hljs-built_in">set</span> cul<br>禁用：<span class="hljs-built_in">set</span> nocursorline<br></code></pre></td></tr></table></figure><h4 id="1-2-4-14加密"><a href="#1-2-4-14加密" class="headerlink" title="1.2.4.14加密"></a>1.2.4.14加密</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用： <span class="hljs-built_in">set</span> <span class="hljs-attribute">key</span>=password<br>禁用： <span class="hljs-built_in">set</span> key=<br></code></pre></td></tr></table></figure><h4 id="1-2-4-15了解更多"><a href="#1-2-4-15了解更多" class="headerlink" title="1.2.4.15了解更多"></a>1.2.4.15了解更多</h4><p>set帮助</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">:help option-list<br><span class="hljs-meta">:set or :set</span> all<br></code></pre></td></tr></table></figure><h2 id="1-3命令模式"><a href="#1-3命令模式" class="headerlink" title="1.3命令模式"></a>1.3命令模式</h2><h3 id="1-3-1退出vim"><a href="#1-3-1退出vim" class="headerlink" title="1.3.1退出vim"></a>1.3.1退出vim</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ZZ</span> 保存退出<br>ZQ不保存退出<br></code></pre></td></tr></table></figure><h3 id="1-3-2光标跳转"><a href="#1-3-2光标跳转" class="headerlink" title="1.3.2光标跳转"></a>1.3.2光标跳转</h3><ul><li>字符间跳转</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">h:</span> 左<br><span class="hljs-symbol">l:</span> 右<br><span class="hljs-symbol">j:</span> 下<br><span class="hljs-symbol">k:</span> 上<br><span class="hljs-meta">#COMMAND：跳转由#指定的个数的字符如：3l</span><br></code></pre></td></tr></table></figure><ul><li>单词间跳转</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">w：下一个单词的词首<br>e：当前或下一单词的词尾<br>b：当前或前一个单词的词首<br>#COMMAND：由#指定一次跳转的单词数<br></code></pre></td></tr></table></figure><ul><li>当前页跳转</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">H</span>：页首<br>M：页中间行<br>L：页底<br>zt：将光标所在当前行移到屏幕顶端<br>zz：将光标所在当前行移到屏幕中间<br>zb：将光标所在当前行移到屏幕底端<br></code></pre></td></tr></table></figure><ul><li>行首行尾</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">^ 跳转至行首的第一个非空白字符<br><span class="hljs-number">0</span> 跳转至行首<br><span class="hljs-variable">$ </span>跳转至行尾<br></code></pre></td></tr></table></figure><ul><li>行间移动</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">#G 或者扩展命令模式下<br>:# 跳转至由第#行<br>G 最后一行<br><span class="hljs-number">1</span>G, gg 第一行<br></code></pre></td></tr></table></figure><ul><li>句间移动</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">) 下一句<br>( 上一句<br></code></pre></td></tr></table></figure><ul><li>段落间移动</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">&#125; 下一段<br>&#123; 上一段<br></code></pre></td></tr></table></figure><ul><li>命令模式翻屏操作</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Ctrl</span>+f 向文件尾部翻一屏,相当于Pagedown<br><span class="hljs-symbol">Ctrl</span>+<span class="hljs-keyword">b</span> 向文件首部翻一屏,相当于Pageup<br><span class="hljs-symbol">Ctrl</span>+d 向文件尾部翻半屏<br><span class="hljs-symbol">Ctrl</span>+u 向文件首部翻半屏<br></code></pre></td></tr></table></figure><h3 id="1-3-3字符编辑"><a href="#1-3-3字符编辑" class="headerlink" title="1.3.3字符编辑"></a>1.3.3字符编辑</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">x</span> 剪切光标处的字符<span class="hljs-comment"># p键可复制剪切的字符</span><br><span class="hljs-comment">#x 剪切光标处起始的#个字符</span><br>xp 交换光标所在处的字符及其后面字符的位置<br><span class="hljs-regexp">~ 转换大小写</span><br>J 删除当前行后的换行符<br></code></pre></td></tr></table></figure><h3 id="1-3-4替换"><a href="#1-3-4替换" class="headerlink" title="1.3.4替换"></a>1.3.4替换</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">r 只替换光标所在处的一个字符<br>R 切换成<span class="hljs-built_in">REPLACE</span>模式（在末行出现-- <span class="hljs-built_in">REPLACE</span> -- 提示）,按ESC回到命令模式<br></code></pre></td></tr></table></figure><h3 id="1-3-5删除命令"><a href="#1-3-5删除命令" class="headerlink" title="1.3.5删除命令"></a>1.3.5删除命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">d 删除命令，可结合光标跳转字符，实现范围删除<br>d<span class="hljs-variable">$</span> 删除到行尾<br>d^ 删除到非空行首<br>d0 删除到行首<br>dw<br>de<br>db<br><span class="hljs-comment">#COMMAND</span><br>dd： 剪切光标所在的行<br><span class="hljs-comment">#dd 多行删除</span><br>D：从当前光标位置一直删除到行尾，等同于d<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><h3 id="1-3-6复制命令"><a href="#1-3-6复制命令" class="headerlink" title="1.3.6复制命令"></a>1.3.6复制命令</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crystal">y 复制，行为相似于d命令<br>y<span class="hljs-variable">$</span><br><span class="hljs-variable"></span>y0<br>y^<br>ye<br>yw<br>yb<br><span class="hljs-comment">#COMMAND</span><br>yy：复制行<br><span class="hljs-comment">#yy 复制多行</span><br>Y：复制整行<br></code></pre></td></tr></table></figure><h3 id="1-3-7粘贴命令"><a href="#1-3-7粘贴命令" class="headerlink" title="1.3.7粘贴命令"></a>1.3.7粘贴命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> 缓冲区存的如果为整行，则粘贴当前光标所在行的下方；否则，则粘贴至当前光标所在处的后面<br><span class="hljs-selector-tag">P</span> 缓冲区存的如果为整行，则粘贴当前光标所在行的上方；否则，则粘贴至当前光标所在处的前面<br></code></pre></td></tr></table></figure><h3 id="1-3-8"><a href="#1-3-8" class="headerlink" title="1.3.8"></a>1.3.8</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Linux从入门到放弃</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>权限管理及文本编辑工具</title>
    <link href="/2022/07/25/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%8F%8A%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/07/25/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%8F%8A%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="1-新建文件和目录的默认权限"><a href="#1-新建文件和目录的默认权限" class="headerlink" title="1.新建文件和目录的默认权限"></a>1.新建文件和目录的默认权限</h1><p>umask 的值可以用来保留在创建文件权限<br>实现方式：</p><ul><li>新建文件的默认权限: 666-umask，如果所得结果某位存在执行（奇数）权限，则将其权限+1,偶<br>数不变</li><li>新建目录的默认权限: 777-umask</li></ul><p>非特权用户umask默认是002</p><p>root的umask默认是022</p><p>查看umask</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">umask</span><br><span class="hljs-comment">#模式方式显示</span><br><span class="hljs-built_in">umask</span> –S<br><span class="hljs-comment">#输出可被调用</span><br><span class="hljs-built_in">umask</span> –p<br></code></pre></td></tr></table></figure><p>修改umask</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">umask</span> <span class="hljs-comment">#bash</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br><span class="hljs-built_in">umask</span> 002<br><span class="hljs-built_in">umask</span> u=rw,g=r,o=<br></code></pre></td></tr></table></figure><p>持久保存umask:</p><ul><li>全局设置：&#x2F;etc&#x2F;bashrc</li><li>用户设置：~&#x2F;.bashrc</li></ul><p>创建临时权限为000的文件三种方法：</p><ul><li>方法一</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> a.txt;<span class="hljs-built_in">chmod</span> 000 a.txt<br></code></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">umask</span> 777;<span class="hljs-built_in">touch</span> a.txt;<span class="hljs-built_in">umask</span> 022<br></code></pre></td></tr></table></figure><ul><li>方法三</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(<span class="hljs-built_in">umask</span> 777;<span class="hljs-built_in">touch</span> a.txt)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux从入门到放弃</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件管理</title>
    <link href="/2022/07/23/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2022/07/23/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-文件系统目录结构"><a href="#1-文件系统目录结构" class="headerlink" title="1.文件系统目录结构"></a>1.文件系统目录结构</h1><h2 id="1-1常见的文件系统目录功能"><a href="#1-1常见的文件系统目录功能" class="headerlink" title="1.1常见的文件系统目录功能"></a>1.1常见的文件系统目录功能</h2><p><img src="/../img/1658580842757.png" alt="1658580842757"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">/boot：引导文件存放目录，内核文件(vmlinuz)、引导加载器(bootloader, grub)都存放于此目录<br>/bin：所有用户使用的基本命令；不能关联至独立分区，OS启动即会用到的程序<br>/sbin：管理类的基本命令；不能关联至独立分区，OS启动即会用到的程序<br>/lib：启动时程序依赖的基本共享库文件以及内核模块文件(/lib/modules)<br>/lib64：专用于x86_64系统上的辅助共享库文件存放位置<br>/etc：配置文件目录<br>/home/USERNAME：普通用户家目录<br>/root：管理员的家目录<br>/media：便携式移动设备挂载点<br>/mnt：临时文件系统挂载点<br>/dev：设备文件及特殊文件存储位置<br>b: block device，随机访问<br>c: character device，线性访问<br>/opt：第三方应用程序的安装位置<br>/srv：系统上运行的服务用到的数据<br>/tmp：临时文件存储位置<br>/usr: universal shared, read-only data<br>bin: 保证系统拥有完整功能而提供的应用程序<br>sbin:<br>lib：32位使用<br>lib64：只存在64位系统<br>include: C程序的头文件(header files)<br>share：结构化独立的数据，例如doc, man等<br><span class="hljs-built_in">local</span>：第三方应用程序的安装位置<br>bin, sbin, lib, lib64, etc, share<br>/var: variable data files<br>cache: 应用程序缓存数据目录<br>lib: 应用程序状态信息数据<br><span class="hljs-built_in">local</span>：专用于为/usr/local下的应用程序存储可变数据<br>lock: 锁文件<br><span class="hljs-built_in">log</span>: 日志目录及文件<br>opt: 专用于为/opt下的应用程序存储可变数据<br>run: 运行中的进程相关数据,通常用于存储进程pid文件<br>spool: 应用程序数据池<br>tmp: 保存系统两次重启之间产生的临时数据<br>/proc: 用于输出内核与进程信息相关的虚拟文件系统<br>/sys：用于输出当前系统上硬件设备相关信息虚拟文件系统<br>/selinux: security enhanced Linux，selinux相关的安全策略等信息的存储位置<br></code></pre></td></tr></table></figure><h2 id="1-2Linux下的文件类型"><a href="#1-2Linux下的文件类型" class="headerlink" title="1.2Linux下的文件类型"></a>1.2Linux下的文件类型</h2><ul><li>-普通文件</li><li>d 目录文件directory</li><li>I 符号链接文件link</li><li>b 块设备block</li><li>c 字符设备character</li><li>p 管道文件pipe</li><li>s 套接字文件socket</li></ul><p><mark style="background-color：colorName/hexOfColor">注意:面试题目容易出现</mark></p><p><img src="/../img/1658568673282.png" alt="1658568673282"></p><h1 id="2-文件操作命令"><a href="#2-文件操作命令" class="headerlink" title="2.文件操作命令"></a>2.文件操作命令</h1><h2 id="2-1相对路径和绝对路径"><a href="#2-1相对路径和绝对路径" class="headerlink" title="2.1相对路径和绝对路径"></a>2.1相对路径和绝对路径</h2><ul><li>绝对路径<br>以正斜杠&#x2F; 即根目录开始<br>完整的文件的位置路径<br>可用于任何想指定一个文件名的时候</li><li>相对路径名<br>不以斜线开始<br>一般情况下，是指相对于当前工作目录的路径，特殊场景下，是相对于某目录的位置<br>可以作为一个简短的形式指定一个文件名</li><li>基名：basename，只取文件名而不要路径</li><li>目录名：dirname，只取路径，不要文件名<br>范例:</li></ul><p><img src="/../img/1658569417929.png" alt="1658569417929"></p><h2 id="2-2更改目录"><a href="#2-2更改目录" class="headerlink" title="2.2更改目录"></a>2.2更改目录</h2><p>命令 cd ： change directory 改变目录<br>选项：-P 切换至物理路径，而非软链接目录<br>可以使用绝对或相对路径<br>切换至父目录： cd ..<br>切换至当前用户主目录： cd<br>切换至以前的工作目录： cd -</p><h2 id="2-3列出目录内容"><a href="#2-3列出目录内容" class="headerlink" title="2.3列出目录内容"></a>2.3列出目录内容</h2><p>ls 命令可以列出当前目录的内容或指定目录<br>用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ls <span class="hljs-selector-attr">[options]</span> <span class="hljs-selector-attr">[files_or_dirs]</span><br></code></pre></td></tr></table></figure><p>常见选项：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 包含隐藏文件</span><br><span class="hljs-deletion">-l 显示额外的信息</span><br><span class="hljs-deletion">-R 目录递归</span><br><span class="hljs-deletion">-ld 目录和符号链接信息</span><br><span class="hljs-deletion">-1 文件分行显示</span><br><span class="hljs-deletion">-S 按从大到小排序</span><br><span class="hljs-deletion">-t 按mtime排序</span><br><span class="hljs-deletion">-u 配合-t选项，显示并按atime从新到旧排序</span><br><span class="hljs-deletion">-U 按目录存放顺序显示</span><br><span class="hljs-deletion">-X 按文件后缀排序</span><br><span class="hljs-deletion">-F 对不同类型文件显示时附加不同的符号：*/=&gt;@|</span><br><span class="hljs-deletion">-C 文件多时，以多列的方式显示文件，默认是一列（标准输出）</span><br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> 查看不同后缀文件时的颜色由 /etc/DIR_COLORS 和@LS_COLORS变量定义<br><span class="hljs-built_in">ls</span> -l 看到文件的大小,不一定是实际文件真正占用空间的大小<br></code></pre></td></tr></table></figure><h2 id="2-4查看文件状态"><a href="#2-4查看文件状态" class="headerlink" title="2.4查看文件状态"></a>2.4查看文件状态</h2><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> filename<br></code></pre></td></tr></table></figure><p>每个文件有三个时间戳：</p><ul><li>access time 访问时间，atime，读取文件内容</li><li>modify time 修改时间，mtime，改变文件内容（数据）</li><li>change time 改变时间，ctime，元数据发生改变</li></ul><p><img src="/../img/1658570229648.png" alt="1658570229648"></p><h2 id="2-5查看文件内容"><a href="#2-5查看文件内容" class="headerlink" title="2.5查看文件内容"></a>2.5查看文件内容</h2><p>用法：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">file</span> [<span class="hljs-keyword">options</span>] <span class="hljs-keyword">filename</span><br></code></pre></td></tr></table></figure><p>常用选项：</p><ul><li>-b 列出文件辨识结果时，不显示文件名称</li><li>-f filelist 列出文件filelist中文件名的文件类型</li><li>-F 使用指定分隔符号替换输出文件名后默认的”:”分隔符</li><li>-L 查看对应软链接对应文件的文件类型</li><li>–help 显示命令在线帮助</li></ul><p><img src="/../img/1658570620547.png" alt="1658570620547"></p><h2 id="2-6文件通配符模式"><a href="#2-6文件通配符模式" class="headerlink" title="2.6文件通配符模式"></a>2.6文件通配符模式</h2><p>常见的通配符如下</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs prolog">* 匹配零个或多个字符，但不匹配 <span class="hljs-string">&quot;.&quot;</span> 开头的文件，即隐藏文件<br>? 匹配任何单个字符,一个汉字也算一个字符<br>~ 当前用户家目录<br>~mage 用户mage家目录<br>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>] 匹配数字范围<br>[a-z] 一个字母<br>[<span class="hljs-symbol">A</span>-<span class="hljs-symbol">Z</span>] 一个字母<br>[wang] 匹配列表中的任何的一个字符<br>[^wang] 匹配列表中的所有字符以外的字符<br>[^a-z] 匹配列表中的所有字符以外的字符<br>. 和 ~+ 当前工作目录<br>~- 前一个工作目录<br></code></pre></td></tr></table></figure><h2 id="2-7批量修改文件名"><a href="#2-7批量修改文件名" class="headerlink" title="2.7批量修改文件名"></a>2.7批量修改文件名</h2><p>利用 rename 可以批量修改文件名<br>格式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">rename</span> [<span class="hljs-keyword">options</span>] <span class="hljs-symbol">&lt;expression&gt;</span> <span class="hljs-symbol">&lt;replacement&gt;</span> <span class="hljs-symbol">&lt;file&gt;</span>...<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#为所有的f开头包含conf的文件加上.bak后缀：</span><br><span class="hljs-built_in">rename</span> <span class="hljs-string">&#x27;conf&#x27;</span> <span class="hljs-string">&#x27;conf.bak&#x27;</span> f*<br><span class="hljs-comment">#去掉所有的bak后缀：</span><br><span class="hljs-built_in">rename</span> <span class="hljs-string">&#x27;.bak&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> *.bak<br></code></pre></td></tr></table></figure><h1 id="3-硬链接和软链接"><a href="#3-硬链接和软链接" class="headerlink" title="3.硬链接和软链接"></a>3.硬链接和软链接</h1><h2 id="3-1硬链接"><a href="#3-1硬链接" class="headerlink" title="3.1硬链接"></a>3.1硬链接</h2><p>硬链接本质上就给一个文件起一个新的名称，实质是同一个文件<br>硬链接特性</p><ul><li>创建硬链接会在对应的目录中增加额外的记录项以引用文件</li><li>对应于同一文件系统上一个物理文件</li><li>每个目录引用相同的inode号</li><li>创建时链接数递增</li><li>删除文件时：rm命令递减计数的链接，文件要存在，至少有一个链接数，当链接数为零时，该文件被删除</li><li>不能跨越驱动器或分区</li><li>不支持对目录创建硬链接</li></ul><p>格式：  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ln</span> filename<span class="hljs-meta"> [linkname]</span><br></code></pre></td></tr></table></figure><h2 id="3-2软链接"><a href="#3-2软链接" class="headerlink" title="3.2软链接"></a>3.2软链接</h2><p>一个符号链接指向另一个文件,就像 windows 中快捷方式，软链接文件和原文件本质上不是同一个文件<br>软链接特点</p><ul><li>一个符号链接的内容是它引用文件的名称</li><li>可以对目录创建软链接</li><li>可以跨分区的文件实现</li><li>指向的是另一个文件的路径；其大小为指向的路径字符串的长度；不增加或减少目标文件inode的引用计数</li><li>在创建软链接时, 如果源文件使用相对路径，是相对于软链接文件的路径，而非相对于当前工作目录,但是软链接的路径如果是相对路径,则是相对于当前工作目录<br>格式：  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ln</span> -s filename<span class="hljs-meta"> [linkname]</span><br></code></pre></td></tr></table></figure>范例： 查看软链接</li></ul><p><img src="/../img/1658588131214.png" alt="1658588131214"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rf <span class="hljs-regexp">/data/</span>dirlink <span class="hljs-comment">#只删除软链接本身,不会删除源目录内容</span><br>rm -rf <span class="hljs-regexp">/data/</span>dirlink/ <span class="hljs-comment">#删除源目录的文件,但不会删除链接文件,此方法非常危险</span><br><span class="hljs-comment">#注意: 删除此软链接务必不要加-r选项</span><br></code></pre></td></tr></table></figure><h1 id="4-硬链接和软链接区别"><a href="#4-硬链接和软链接区别" class="headerlink" title="4.硬链接和软链接区别"></a>4.硬链接和软链接区别</h1><ol><li>本质：</li></ol><ul><li>硬链接：本质是同一个文件</li><li>软链接：本质不是同一个文件</li></ul><ol start="2"><li>跨设备</li></ol><ul><li>硬链接：不支持</li><li>软链接：支持</li></ul><ol start="3"><li>inode</li></ol><ul><li>硬链接：相同</li><li>软链接：不同</li></ul><ol start="4"><li>链接数</li></ol><ul><li>硬链接：创建新的硬链接,链接数会增加,删除硬链接,链接数减少</li><li>软链接：创建或删除,链接数不会变化</li></ul><ol start="5"><li>文件夹</li></ol><ul><li>硬链接：不支持</li><li>软链接：支持</li></ul><ol start="6"><li>相对路径</li></ol><ul><li>硬链接：原始文件相对路径是相对于当前工作目录</li><li>软链接：原始文件的相对路径是相对于链接文件的相对路径</li></ul><ol start="7"><li>删除源文件</li></ol><ul><li>硬链接：只是链接数减一,但链接文件的访问不受影响</li><li>软链接：链接文件将无法访问</li></ul><ol start="8"><li>文件类型</li></ol><ul><li>硬链接：和源文件相同</li><li>软链接：链接文件,和源文件无关</li></ul><ol start="9"><li>文件大小</li></ol><ul><li>硬链接: 和源文件相同</li><li>软链接: 源文件的路径的长度</li></ul><h1 id="5-生产案例"><a href="#5-生产案例" class="headerlink" title="5.生产案例"></a>5.生产案例</h1><ul><li>案例1：提示空间满 No space left on device，但 df 可以看到空间很多，为什么？<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">解决方法：节点编号用完了，增加节点编号增加不了，说明你的磁盘上的文件都是小文件；<br><span class="hljs-number">1</span>、删除不用的文件和文件夹释放inode<br><span class="hljs-number">2</span>、迁移数据到新磁盘然后格式化重新指定inode<br>知识点：<br><span class="hljs-number">1.</span>Linux下一个文件夹或者一个文件就会占用一个inode资源<br><span class="hljs-number">2.i</span>node资源数量是在格式化磁盘的时候就指定的（可以不指定，但也会有一个值），要更改这个<br>数量必须格式化磁盘<br><span class="hljs-number">3.</span>如果某个磁盘的inode资源用尽，即便磁盘有空间，也不能进行任何文件或者文件夹的新增<br><span class="hljs-number">4.</span>删除一个文件夹或者文件就能释放一个inode资源<br></code></pre></td></tr></table></figure></li><li>案例2：提示空间快满，使用 rm 删除了很大的无用文件后，df仍然看到空间不足，为什么？如何解决？<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">有其他程序在使用该文件，可以清空该文件内容。使用&gt;清空文件内容<br><span class="hljs-quote">&gt; filename</span><br><span class="hljs-section"># &gt; test.log</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="/../img/1658589334005.png" alt="1658589334005"></p><h1 id="6-重定向和管道"><a href="#6-重定向和管道" class="headerlink" title="6.重定向和管道"></a>6.重定向和管道</h1><h2 id="6-1-标准输入和输出"><a href="#6-1-标准输入和输出" class="headerlink" title="6.1 标准输入和输出"></a>6.1 标准输入和输出</h2><p>程序：指令+数据<br>读入数据：Input<br>输出数据：Output<br>打开的文件都有一个fd: file descriptor (文件描述符)<br>Linux给程序提供三种 I&#x2F;O 设备</p><ul><li>标准输入（STDIN） －0 默认接受来自终端窗口的输入</li><li>标准输出（STDOUT）－1 默认输出到终端窗口</li><li>标准错误（STDERR） －2 默认输出到终端窗口</li></ul><h2 id="6-2标准的输出和错误重定向"><a href="#6-2标准的输出和错误重定向" class="headerlink" title="6.2标准的输出和错误重定向"></a>6.2标准的输出和错误重定向</h2><p>格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">命令 操作符号 文件名<br></code></pre></td></tr></table></figure><p>支持的操作符号包括：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-meta prompt_">1&gt; </span>或 &gt; 把STDOUT重定向到文件<br><span class="hljs-meta prompt_">2&gt; </span>把STDERR重定向到文件<br>&amp;&gt; 把标准输出和错误都重定向<br>&gt;&amp; 和上面功能一样，建议使用上面方式<br></code></pre></td></tr></table></figure><p><img src="/../img/1658627818949.png" alt="1658627818949"></p><p><img src="/../img/1658627951062.png" alt="1658627951062"></p><p><img src="/../img/1658628044574.png" alt="1658628044574"></p><p>以上的文件如果已经存在，文件内容则会覆盖</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># &gt;&gt; 可以在原有的基础内容上追加内容</span><br><span class="hljs-meta prompt_">&gt;&gt;</span> 追加标准输出重定向至文件<br></code></pre></td></tr></table></figure><p><img src="/../img/1658628188096.png" alt="1658628188096"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">2&gt;</span><span class="language-bash">&gt; 追加标准错误重定向至文件</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658628249117.png" alt="1658628249117"></p><h2 id="6-3将标准输出和错误输出指定向不同的文件"><a href="#6-3将标准输出和错误输出指定向不同的文件" class="headerlink" title="6.3将标准输出和错误输出指定向不同的文件"></a>6.3将标准输出和错误输出指定向不同的文件</h2><p>格式：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">COMMAND &gt; /path/<span class="hljs-keyword">to</span>/<span class="hljs-built_in">file</span>.<span class="hljs-built_in">log</span> <span class="hljs-number">2</span>&gt; /path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">error</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658628570176.png" alt="1658628570176"></p><h2 id="6-4合并标准输出和错误输出为同一个数据流进行重定向"><a href="#6-4合并标准输出和错误输出为同一个数据流进行重定向" class="headerlink" title="6.4合并标准输出和错误输出为同一个数据流进行重定向"></a>6.4合并标准输出和错误输出为同一个数据流进行重定向</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">&amp;&gt; 覆盖重定向<br>&amp;&gt;&gt; 追加重定向<br>COMMAND &gt; /path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">out</span> <span class="hljs-number">2</span>&gt;<span class="hljs-number">&amp;1</span> （顺序很重要）<br>COMMAND &gt;&gt; /path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">out</span> <span class="hljs-number">2</span>&gt;<span class="hljs-number">&amp;1</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658628863373.png" alt="1658628863373"></p><p><img src="/../img/1658628910790.png" alt="1658628910790"></p><p><img src="/../img/1658629123843.png" alt="1658629123843"></p><ul><li>错误案例</li></ul><p><img src="/../img/1658629245131.png" alt="1658629245131">  </p><h2 id="6-5标准输入重定向"><a href="#6-5标准输入重定向" class="headerlink" title="6.5标准输入重定向"></a>6.5标准输入重定向</h2><p>实现标准输入重定向的符号</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">COMMAND</span> <span class="hljs-number">0</span>&lt; <span class="hljs-keyword">FILE</span><br><span class="hljs-keyword">COMMAND</span> &lt; <span class="hljs-keyword">FILE</span><br></code></pre></td></tr></table></figure><ul><li>面试题：</li></ul><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-comment"># 求1+2+···+10的和</span><br><span class="hljs-type">seq</span> -s+ <span class="hljs-number">10</span> &gt; <span class="hljs-type">seq</span>.log<br>bc &lt; <span class="hljs-type">seq</span>.log<br></code></pre></td></tr></table></figure><p><img src="/../img/1658631614537.png" alt="1658631614537"></p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nim">扩展：求<span class="hljs-number">1</span>*<span class="hljs-number">2</span>*···*<span class="hljs-number">10</span>的值：<br><span class="hljs-type">seq</span> -s* <span class="hljs-number">10</span> &gt;<span class="hljs-type">seq</span>.log<br>bc &lt; <span class="hljs-type">seq</span>.log<br></code></pre></td></tr></table></figure><p><img src="/../img/1658631847010.png" alt="1658631847010"></p><p><img src="/../img/1658631986469.png" alt="1658631986469"></p><h3 id="6-5-1tr命令"><a href="#6-5-1tr命令" class="headerlink" title="6.5.1tr命令"></a>6.5.1tr命令</h3><p>tr 转换和删除字符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">tr</span> <span class="hljs-selector-attr">[option]</span> ··· SET1 <span class="hljs-selector-attr">[SET2]</span><br></code></pre></td></tr></table></figure><p>选项：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css">-d <span class="hljs-attr">--delete</span>：删除所有属于第一字符集的字符<br>-s <span class="hljs-attr">--squeeze-repeats</span>：把连续重复的字符以单独一个字符表示,即去重<br>-t <span class="hljs-attr">--truncate-set1</span>：将第一个字符集对应字符转化为第二字符集对应的字符<br>-c –C <span class="hljs-attr">--complement</span>：取字符集的补集<br>\NNN character with octal value NNN (<span class="hljs-number">1</span> <span class="hljs-selector-tag">to</span> <span class="hljs-number">3</span> octal digits)<br>\\ backslash<br>\<span class="hljs-selector-tag">a</span> audible BEL<br>\<span class="hljs-selector-tag">b</span> backspace<br>\f <span class="hljs-selector-tag">form</span> feed<br>\n new line<br>\r return<br>\t horizontal tab<br>\v vertical tab<br><span class="hljs-selector-attr">[:alnum:]</span>：字母和数字<br><span class="hljs-selector-attr">[:alpha:]</span>：字母<br><span class="hljs-selector-attr">[:digit:]</span>：数字<br><span class="hljs-selector-attr">[:lower:]</span>：小写字母<br><span class="hljs-selector-attr">[:upper:]</span>：大写字母<br><span class="hljs-selector-attr">[:space:]</span>：空白字符<br><span class="hljs-selector-attr">[:print:]</span>：可打印字符<br><span class="hljs-selector-attr">[:punct:]</span>：标点符号<br><span class="hljs-selector-attr">[:graph:]</span>：图形字符<br><span class="hljs-selector-attr">[:cntrl:]</span>：控制（非打印）字符<br><span class="hljs-selector-attr">[:xdigit:]</span>：十六进制字符<br></code></pre></td></tr></table></figure><p>范例：</p><ul><li>删除字符,删除’abcd’中的’a’</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> abcd | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658633116721.png" alt="1658633116721"></p><ul><li>将’aaabbbccc‘中字符去重</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> aaabbbccc |<span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27;abc&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658633240146.png" alt="1658633240146"></p><ul><li>输入df将空格用”+”替换</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> | <span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27; &#x27;</span> +<br></code></pre></td></tr></table></figure><p><img src="/../img/1658633697556.png" alt="1658633697556"></p><h3 id="6-5-2多行重定向"><a href="#6-5-2多行重定向" class="headerlink" title="6.5.2多行重定向"></a>6.5.2多行重定向</h3><p>使用 “&lt;&lt;终止词” 命令从键盘把多行重导向给STDIN，直到终止词位置之前的所有文本都发送给<br>STDIN，有时被称为就地文本（here documents）<br>其中终止词可以是任何一个或多个符号，比如：!，@，$，EOF（End Of File），magedu等，其中EOF<br>比较常用</p><p>范例：</p><p><img src="/../img/1658634064057.png" alt="1658634064057"></p><h3 id="6-5-3高级重定向"><a href="#6-5-3高级重定向" class="headerlink" title="6.5.3高级重定向"></a>6.5.3高级重定向</h3><h4 id="6-5-3-1-cmd1-lt-lt-cmd2"><a href="#6-5-3-1-cmd1-lt-lt-cmd2" class="headerlink" title="6.5.3.1 cmd1 &lt; &lt;(cmd2)"></a>6.5.3.1 cmd1 &lt; &lt;(cmd2)</h4><p>名称为 Process substitution ,是由两个部分组成<br>&lt;(cmd2) 表示把cmd2的输出写入一个临时文件, 注意：&lt;和（之间无空格<br>cmd1 &lt; 这是一个标准的stdin重定向<br>把两个合起来，就是把cmd2的输出stdout传递给cmd1作为输入stdin, 中间通过临时文件做传递</p><p><img src="/../img/1658634342387.png" alt="1658634342387"></p><h4 id="6-5-3-2cmd1-lt-lt-lt-’string’"><a href="#6-5-3-2cmd1-lt-lt-lt-’string’" class="headerlink" title="6.5.3.2cmd1&lt;&lt;&lt;’string’"></a>6.5.3.2cmd1&lt;&lt;&lt;’string’</h4><p>含义是 here-string ，表示传给给cmd的stdin的内容从这里开始是一个字符串。<br>范例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bc</span> &lt;&lt;&lt;&#x27;<span class="hljs-number">2</span>+<span class="hljs-number">4</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="/../img/1658634687295.png" alt="1658634687295"></p><h2 id="6-6-tee命令"><a href="#6-6-tee命令" class="headerlink" title="6.6 tee命令"></a>6.6 tee命令</h2><p>tee命令用于读取标准输入的数据，并将其内容输出成文件。</p><p>tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p><p>选项：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">a</span> 追加<br></code></pre></td></tr></table></figure><p><img src="/../img/1658643404404.png" alt="1658643404404"></p><h1 id="7-用户和组相关概念"><a href="#7-用户和组相关概念" class="headerlink" title="7.用户和组相关概念"></a>7.用户和组相关概念</h1><h2 id="7-1-用户"><a href="#7-1-用户" class="headerlink" title="7.1 用户"></a>7.1 用户</h2><p>Linux中每个用户是通过 User Id （UID）来唯一标识的</p><ul><li><p>管理员：root, 0</p></li><li><p>普通用户：1-60000 自动分配</p><ul><li>系统用户：1-499 （CentOS 6以前）, 1-999 （CentOS 7以后）<br>对守护进程获取资源进行权限分配</li><li>登录用户：500+ （CentOS6以前）, 1000+（CentOS7以后）<br>给用户进行交互式登录使用</li></ul></li></ul><h2 id="7-2-用户组"><a href="#7-2-用户组" class="headerlink" title="7.2 用户组"></a>7.2 用户组</h2><p>Linux中可以将一个或多个用户加入用户组中，用户组是通过Group ID（GID） 来唯一标识的。</p><ul><li>管理员组：root, 0</li><li>普通组：<ul><li>系统组：1-499（CentOS 6以前）, 1-999（CentOS7以后）, 对守护进程获取资源进行权限分配</li><li>普通组：500+（CentOS 6以前）, 1000+（CentOS7以后）, 给用户使用</li></ul></li></ul><h2 id="7-3-用户和组的关系"><a href="#7-3-用户和组的关系" class="headerlink" title="7.3 用户和组的关系"></a>7.3 用户和组的关系</h2><ul><li>用户的主要组(primary group)：用户必须属于一个且只有一个主组，默认创建用户时会自动创建和用户名同名的组，做为用户的主要组，由于此组中只有一个用户，又称为私有组</li><li>用户的附加组(supplementary group)： 一个用户可以属于零个或多个辅助组，附属组</li></ul><p>范例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@rocky8 home]# id yuankun<br><span class="hljs-attribute">uid</span>=1000(yuankun) <span class="hljs-attribute">gid</span>=1000(yuankun) <span class="hljs-attribute">groups</span>=1000(yuankun)<br></code></pre></td></tr></table></figure><h2 id="7-4用户和组的配置文件"><a href="#7-4用户和组的配置文件" class="headerlink" title="7.4用户和组的配置文件"></a>7.4用户和组的配置文件</h2><h3 id="7-4-1用户和组的主要配置文件"><a href="#7-4-1用户和组的主要配置文件" class="headerlink" title="7.4.1用户和组的主要配置文件"></a>7.4.1用户和组的主要配置文件</h3><ul><li>&#x2F;etc&#x2F;passwd：用户及其属性信息(名称、UID、主组ID等）</li><li>&#x2F;etc&#x2F;shadow：用户密码及其相关属性</li><li>&#x2F;etc&#x2F;group：组及其属性信息</li><li>&#x2F;etc&#x2F;gshadow：组密码及其相关属性</li></ul><h3 id="7-4-2-passwd文件格式"><a href="#7-4-2-passwd文件格式" class="headerlink" title="7.4.2 passwd文件格式"></a>7.4.2 passwd文件格式</h3><ul><li>login name：登录用名（yuankun）</li><li>passwd：密码 (x)</li><li>UID：用户身份编号 (1000)</li><li>GID：登录默认所在组编号 (1000)</li><li>GECOS：用户全名或注释</li><li>home directory：用户主目录 (&#x2F;home&#x2F;wang)</li><li>shell：用户默认使用shell (&#x2F;bin&#x2F;bash)</li></ul><p><img src="/../img/1658659141980.png" alt="1658659141980"></p><h3 id="7-4-3shadow文件格式"><a href="#7-4-3shadow文件格式" class="headerlink" title="7.4.3shadow文件格式"></a>7.4.3shadow文件格式</h3><ul><li>登录用名</li><li>用户密码:一般用sha512加密</li><li>从1970年1月1日起到密码最近一次被更改的时间</li><li>密码再过几天可以被变更（0表示随时可被变更）</li><li>密码再过几天必须被变更（99999表示永不过期）</li><li>密码过期前几天系统提醒用户（默认为一周）</li><li>密码过期几天后帐号会被锁定</li><li>从1970年1月1日算起，多少天后帐号失效<br><img src="/../img/1658662334418.png" alt="1658662334418"></li></ul><h3 id="7-4-4group文件格式"><a href="#7-4-4group文件格式" class="headerlink" title="7.4.4group文件格式"></a>7.4.4group文件格式</h3><ul><li>群组名称：就是群组名称</li><li>群组密码：通常不需要设定，密码是被记录在 &#x2F;etc&#x2F;gshadow</li><li>GID：就是群组的 ID</li><li>以当前组为附加组的用户列表(分隔符为逗号)</li></ul><p><img src="/../img/1658662552564.png" alt="1658662552564"></p><h3 id="7-4-5gshadow文件格式"><a href="#7-4-5gshadow文件格式" class="headerlink" title="7.4.5gshadow文件格式"></a>7.4.5gshadow文件格式</h3><ul><li>群组名称：就是群的名称</li><li>群组密码：</li><li>组管理员列表：组管理员的列表，更改组密码和成员</li><li>以当前组为附加组的用户列表：多个用户间用逗号分隔</li></ul><p><img src="/../img/1658662641679.png" alt="1658662641679"></p><h2 id="7-5-用户和组管理命令"><a href="#7-5-用户和组管理命令" class="headerlink" title="7.5 用户和组管理命令"></a>7.5 用户和组管理命令</h2><ul><li>用户管理命令<ul><li>useradd(添加用户)</li><li>usermod(修改用户)</li><li>userdel(删除用户)</li></ul></li><li>组账号维护命令<ul><li>groupadd</li><li>groupmod</li><li>groupdel</li></ul></li></ul><p>面试题：添加新用户后家目录下的文件来源什么地方？</p><p>来源于&#x2F;etc&#x2F;skel,进入&#x2F;etc&#x2F;skel下查看文件和进入test用户的家目录下查看文件是一致的</p><p><img src="/../img/1658665374181.png" alt="1658665374181"></p><p><img src="/../img/1658665436871.png" alt="1658665436871"></p><h3 id="7-5-1用户创建"><a href="#7-5-1用户创建" class="headerlink" title="7.5.1用户创建"></a>7.5.1用户创建</h3><p>useradd命令可以创建新的linux用户</p><p>格式：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">useradd [<span class="hljs-keyword">options</span>] <span class="hljs-keyword">login</span><br></code></pre></td></tr></table></figure><p>常见的选项：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-u UID</span><br><span class="hljs-deletion">-o 配合-u 选项，不检查UID的唯一性</span><br><span class="hljs-deletion">-g GID 指明用户所属基本组，可为组名，也可以GID</span><br><span class="hljs-deletion">-c &quot;COMMENT“ 用户的注释信息</span><br><span class="hljs-deletion">-d HOME_DIR 以指定的路径(不存在)为家目录</span><br><span class="hljs-deletion">-s SHELL 指明用户的默认shell程序，可用列表在/etc/shells文件中</span><br><span class="hljs-deletion">-G GROUP1[,GROUP2,...] 为用户指明附加组，组须事先存在</span><br><span class="hljs-deletion">-N 不创建私用组做主组，使用users组做主组</span><br><span class="hljs-deletion">-r 创建系统用户 CentOS 6之前: ID&lt;500，CentOS7 以后: ID&lt;1000</span><br><span class="hljs-deletion">-m 创建家目录，用于系统用户</span><br><span class="hljs-deletion">-M 不创建家目录，用于非系统用户</span><br><span class="hljs-deletion">-p 指定加密的密码</span><br></code></pre></td></tr></table></figure><p>范例:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[root@rocky8 home]<span class="hljs-meta"># groupadd apache</span><br>[root@rocky8 home]<span class="hljs-meta"># useradd -r -u 48 -g apache -s /sbin/nologin -d /var/www -c <span class="hljs-string">&quot;Apache&quot;</span> apache</span><br></code></pre></td></tr></table></figure><p>useradd命令默认值设置由&#x2F;etc&#x2F;default&#x2F;useradd定义</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@centos8 ~]#cat <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">default</span>/useradd<br># useradd defaults <span class="hljs-keyword">file</span><br><span class="hljs-keyword">GROUP</span>=<span class="hljs-number">100</span><br>HOME=/home<br>INACTIVE=-<span class="hljs-number">1</span> #对应<span class="hljs-regexp">/etc/</span>shadow文件第<span class="hljs-number">7</span>列，即用户密码过期后的帐号锁定的宽限期,-<span class="hljs-number">1</span>表示不锁定<br>EXPIRE= #对应<span class="hljs-regexp">/etc/</span>shadow文件第<span class="hljs-number">8</span>列，即用户帐号的有效期<br>SHELL=<span class="hljs-regexp">/bin/</span>bash<br>SKEL=<span class="hljs-regexp">/etc/</span>skel #用于生成新建用户家目录的模版文件<br>CREATE_MAIL_SPOOL=yes<br></code></pre></td></tr></table></figure><h3 id="7-5-2用户属性修改"><a href="#7-5-2用户属性修改" class="headerlink" title="7.5.2用户属性修改"></a>7.5.2用户属性修改</h3><p>usermod命令可以修改用户属性</p><p>格式：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">usermod [<span class="hljs-keyword">options</span>] <span class="hljs-keyword">login</span><br></code></pre></td></tr></table></figure><p>常见选项：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-u UID: 新UID</span><br><span class="hljs-deletion">-g GID: 新主组</span><br><span class="hljs-deletion">-G GROUP1[,GROUP2,...[,GROUPN]]]：新附加组，原来的附加组将会被覆盖；若保留原有，则要同时使</span><br>用-a选项<br><span class="hljs-deletion">-s SHELL：新的默认SHELL</span><br><span class="hljs-deletion">-c &#x27;COMMENT&#x27;：新的注释信息</span><br><span class="hljs-deletion">-d HOME: 新家目录不会自动创建；若要创建新家目录并移动原家数据，同时使用-m选项</span><br><span class="hljs-deletion">-l login_name: 新的名字</span><br><span class="hljs-deletion">-L: lock指定用户,在/etc/shadow 密码栏的增加 !</span><br><span class="hljs-deletion">-U: unlock指定用户,将 /etc/shadow 密码栏的 ! 拿掉</span><br><span class="hljs-deletion">-e YYYY-MM-DD: 指明用户账号过期日期</span><br><span class="hljs-deletion">-f INACTIVE: 设定非活动期限，即宽限期</span><br></code></pre></td></tr></table></figure><p>范例：创建test用户，使用id username查看用户的uid,然后修改其uid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky8 home]<span class="hljs-comment"># useradd test   #添加tes用户</span><br>[root@rocky8 home]<span class="hljs-comment"># id test#查看用户信息</span><br>uid=1001(<span class="hljs-built_in">test</span>) gid=1001(<span class="hljs-built_in">test</span>) <span class="hljs-built_in">groups</span>=1001(<span class="hljs-built_in">test</span>)<br>[root@rocky8 home]<span class="hljs-comment"># usermod -u 1002 test   # 将uid修改为1002</span><br>[root@rocky8 home]<span class="hljs-comment"># id test#查看用户信息修改成功</span><br>uid=1002(<span class="hljs-built_in">test</span>) gid=1001(<span class="hljs-built_in">test</span>) <span class="hljs-built_in">groups</span>=1001(<span class="hljs-built_in">test</span>)<br></code></pre></td></tr></table></figure><h3 id="7-5-4删除用户"><a href="#7-5-4删除用户" class="headerlink" title="7.5.4删除用户"></a>7.5.4删除用户</h3><p>userdel可以删除用户</p><p>格式：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">userdel [<span class="hljs-keyword">options</span>] <span class="hljs-keyword">login</span><br></code></pre></td></tr></table></figure><p>常见的选项：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">-f, <span class="hljs-comment">--force 强制</span><br>-r, <span class="hljs-comment">--remove 删除用户家目录和邮箱</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">userdel -f <span class="hljs-built_in">test</span>  <span class="hljs-comment">#强制删除</span><br>userdel -rf <span class="hljs-built_in">test</span> <span class="hljs-comment"># 删除家目录和邮箱</span><br></code></pre></td></tr></table></figure><h3 id="7-5-5查看用户相关ID"><a href="#7-5-5查看用户相关ID" class="headerlink" title="7.5.5查看用户相关ID"></a>7.5.5查看用户相关ID</h3><p>id命令可以查看用户的UID、GID等信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">id <span class="hljs-selector-attr">[options]</span> <span class="hljs-selector-attr">[username]</span><br></code></pre></td></tr></table></figure><p>常见选项：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-u: 显示UID</span><br><span class="hljs-deletion">-g: 显示GID</span><br><span class="hljs-deletion">-G: 显示用户所属的组的ID</span><br><span class="hljs-deletion">-n: 显示名称，需配合ugG使用</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@rocky8</span> home]<span class="hljs-meta"># id test</span><br>uid=<span class="hljs-number">1002</span>(test) gid=<span class="hljs-number">1001</span>(test) groups=<span class="hljs-number">1001</span>(test)<br>[root<span class="hljs-symbol">@rocky8</span> home]<span class="hljs-meta"># id -u test</span><br><span class="hljs-number">1002</span><br>[root<span class="hljs-symbol">@rocky8</span> home]<span class="hljs-meta"># id -g test</span><br><span class="hljs-number">1001</span><br>[root<span class="hljs-symbol">@rocky8</span> home]<span class="hljs-meta"># id -G test</span><br><span class="hljs-number">1001</span><br>[root<span class="hljs-symbol">@rocky8</span> home]<span class="hljs-meta"># </span><br></code></pre></td></tr></table></figure><h3 id="7-5-6查看linux所有用户"><a href="#7-5-6查看linux所有用户" class="headerlink" title="7.5.6查看linux所有用户"></a>7.5.6查看linux所有用户</h3><ul><li>查看&#x2F;etc&#x2F;passwd</li></ul><p><img src="/../img/1658664876880.png" alt="1658664876880"></p><ul><li>getent passwd</li></ul><p><img src="/../img/1658664946447.png" alt="1658664946447"></p><h3 id="7-5-7切换用户"><a href="#7-5-7切换用户" class="headerlink" title="7.5.7切换用户"></a>7.5.7切换用户</h3><p>su: 即 switch user，命令可以切换用户身份，并且以指定用户的身份执行命令<br>格式：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">su <span class="hljs-comment">[options...]</span> <span class="hljs-comment">[-]</span> <span class="hljs-comment">[user <span class="hljs-comment">[args...]</span>]</span><br></code></pre></td></tr></table></figure><p>常见的选项</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">-<span class="hljs-keyword">l</span> --login su -<span class="hljs-keyword">l</span> UserName 相当于 su - UserName<br>-<span class="hljs-keyword">c</span>, --<span class="hljs-keyword">command</span> <span class="hljs-symbol">&lt;command&gt;</span> pass <span class="hljs-keyword">a</span> single <span class="hljs-keyword">command</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">shell</span> with -<span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>切换用户的方式：</p><ul><li>su UserName：非登录式切换，即不会读取目标用户的配置文件，不改变当前工作目录，即不完全切换</li><li>su - UserName：登录式切换，会读取目标用户的配置文件，切换至自已的家目录，即完全切换<br>说明：root su至其他用户无须密码；非root用户切换时需要密码<br>注意：su 切换新用户后，使用 exit 退回至旧的用户身份，而不要再用 su 切换至旧用户，否则会生成很多的bash子进程，环境可能会混乱。</li></ul><p>换个身份执行命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">su</span> - username -c <span class="hljs-string">&#x27;command&#x27;</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@rocky8</span> skel]<span class="hljs-comment"># su - test -c &#x27;touch test.log&#x27;</span><br>[root<span class="hljs-variable">@rocky8</span> skel]<span class="hljs-comment"># su test</span><br>[test<span class="hljs-variable">@rocky8</span> skel]<span class="hljs-variable">$ </span>ll<br>total <span class="hljs-number">0</span><br>[test<span class="hljs-variable">@rocky8</span> skel]<span class="hljs-variable">$ </span>ls -a<br>.  ..  .bash_logout  .bash_profile  .bashrc<br>[test<span class="hljs-variable">@rocky8</span> skel]<span class="hljs-variable">$ </span>cd /home/<br>[test<span class="hljs-variable">@rocky8</span> home]<span class="hljs-variable">$ </span>ll<br>total <span class="hljs-number">0</span><br>drwx------. <span class="hljs-number">2</span> test    test     <span class="hljs-number">99</span> Jul <span class="hljs-number">24</span> <span class="hljs-number">11</span>:<span class="hljs-number">38</span> test<br>drwx------. <span class="hljs-number">2</span> test1   test1    <span class="hljs-number">78</span> Jul <span class="hljs-number">24</span> <span class="hljs-number">11</span>:<span class="hljs-number">24</span> test1<br>drwx------. <span class="hljs-number">2</span> yuankun yuankun <span class="hljs-number">114</span> Jul <span class="hljs-number">23</span> <span class="hljs-number">0</span>8:<span class="hljs-number">24</span> yuankun<br>[test<span class="hljs-variable">@rocky8</span> home]<span class="hljs-variable">$ </span>cd test<br>[test<span class="hljs-variable">@rocky8</span> ~]<span class="hljs-variable">$ </span>ll<br>total <span class="hljs-number">0</span><br>-rw-rw-r--. <span class="hljs-number">1</span> test test <span class="hljs-number">0</span> Jul <span class="hljs-number">24</span> <span class="hljs-number">11</span>:<span class="hljs-number">38</span> test.log<br>[test<span class="hljs-variable">@rocky8</span> ~]<span class="hljs-variable">$ </span><br><br></code></pre></td></tr></table></figure><h3 id="7-5-8设置密码"><a href="#7-5-8设置密码" class="headerlink" title="7.5.8设置密码"></a>7.5.8设置密码</h3><p>passwd 可以修改用户密码</p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">passwd <span class="hljs-selector-attr">[options]</span> username<br></code></pre></td></tr></table></figure><p>常见选项：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-d：删除指定用户密码</span><br><span class="hljs-deletion">-l：锁定指定用户</span><br><span class="hljs-deletion">-u：解锁指定用户</span><br><span class="hljs-deletion">-e：强制用户下次登录修改密码</span><br><span class="hljs-deletion">-f：强制操作</span><br><span class="hljs-deletion">-n mindays：指定最短使用期限</span><br><span class="hljs-deletion">-x maxdays：最大使用期限</span><br><span class="hljs-deletion">-w warndays：提前多少天开始警告</span><br><span class="hljs-deletion">-i inactivedays：非活动期限</span><br><span class="hljs-deletion">--stdin：从标准输入接收用户密码,Ubuntu无此选项</span><br></code></pre></td></tr></table></figure><p>范例：非交互式修改用户密码</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#此方式更通用，适用于各种Linux版本，如:ubuntu</span><br>root<span class="hljs-variable">@ununtu2004</span><span class="hljs-symbol">:/home</span><span class="hljs-comment"># echo -e &#x27;123456\n123456&#x27; | passwd test</span><br><span class="hljs-title class_">New</span> <span class="hljs-symbol">password:</span> <span class="hljs-title class_">Retype</span> new <span class="hljs-symbol">password:</span> <span class="hljs-symbol">passwd:</span> password updated successfully<br>root<span class="hljs-variable">@ununtu2004</span><span class="hljs-symbol">:/home</span><span class="hljs-comment"># </span><br><br><span class="hljs-comment">#适用于红帽系列的Linux版本</span><br>[root<span class="hljs-variable">@rocky8</span> home]<span class="hljs-comment"># echo -e &#x27;123456&#x27;| passwd --stdin test</span><br><span class="hljs-title class_">Changing</span> password <span class="hljs-keyword">for</span> user test.<br><span class="hljs-symbol">passwd:</span> all authentication tokens updated successfully.<br>[root<span class="hljs-variable">@rocky8</span> home]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h2 id="7-6文件权限管理"><a href="#7-6文件权限管理" class="headerlink" title="7.6文件权限管理"></a>7.6文件权限管理</h2><h3 id="7-6-1文件所有者和属组属性操作"><a href="#7-6-1文件所有者和属组属性操作" class="headerlink" title="7.6.1文件所有者和属组属性操作"></a>7.6.1文件所有者和属组属性操作</h3><h4 id="7-6-1-1设置文件的所有者chown"><a href="#7-6-1-1设置文件的所有者chown" class="headerlink" title="7.6.1.1设置文件的所有者chown"></a>7.6.1.1设置文件的所有者chown</h4><p>chown 命令可以修改文件的属主，也可以修改文件属组<br>格式：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">chown [<span class="hljs-symbol">OPTION</span>]... [<span class="hljs-symbol">OWNER</span>][:[<span class="hljs-symbol">GROUP</span>]] <span class="hljs-symbol">FILE</span>...<br>chown [<span class="hljs-symbol">OPTION</span>]... --reference=<span class="hljs-symbol">RFILE</span> <span class="hljs-symbol">FILE</span>...<br></code></pre></td></tr></table></figure><p>用法说明：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ldif">OWNER <span class="hljs-comment">#只修改所有者</span><br><span class="hljs-attribute">OWNER</span>:GROUP <span class="hljs-comment">#同时修改所有者和属组</span><br>:GROUP <span class="hljs-comment">#只修改属组，冒号也可用 . 替换</span><br><span class="hljs-literal">-</span>-reference=RFILE <span class="hljs-comment">#参考指定的的属性，来修改</span><br><span class="hljs-literal">-</span>R<span class="hljs-comment">#递归，此选项慎用，非常危险！</span><br></code></pre></td></tr></table></figure><p>范例：</p><ul><li>修改所有者</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs linux">[root@rocky8 home]# touch data.log<br>[root@rocky8 home]# ll# data.log所有者为root<br>total 0<br>-rw-r--r--. 1 root    root      0 Jul 24 13:16 data.log<br>drwx------. 2 gentoo  gentoo   62 Jul 24 12:39 gentoo<br>drwx------. 2 test    test     99 Jul 24 11:38 test<br>drwx------. 2 test1   test1    78 Jul 24 11:24 test1<br>drwx------. 2 yuankun yuankun 114 Jul 23 08:24 yuankun<br>[root@rocky8 home]# chown yuankun data.log # 修改所有者为yuankun<br>[root@rocky8 home]# ll<br>total 0<br>-rw-r--r--. 1 yuankun root      0 Jul 24 13:16 data.log<br>drwx------. 2 gentoo  gentoo   62 Jul 24 12:39 gentoo<br>drwx------. 2 test    test     99 Jul 24 11:38 test<br>drwx------. 2 test1   test1    78 Jul 24 11:24 test1<br>drwx------. 2 yuankun yuankun 114 Jul 23 08:24 yuankun<br>[root@rocky8 home]# <br></code></pre></td></tr></table></figure><ul><li>修改所属组</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">chown :bin <span class="hljs-keyword">data</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658672497952.png" alt="1658672497952"></p><ul><li>同时修改所有者和所属组</li></ul><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@rocky8 home]<span class="hljs-comment"># touch test.log</span><br>[root@rocky8 home]<span class="hljs-comment"># </span><br>[root@rocky8 home]<span class="hljs-comment"># </span><br>[root@rocky8 home]<span class="hljs-comment"># chown yuankun:bin test.log   # 冒号用.替换也可以</span><br>[root@rocky8 home]<span class="hljs-comment"># ll</span><br>total 0<br>-rw-r--r--.<span class="hljs-number"> 1 </span>yuankun bin      <span class="hljs-number"> 0 </span>Jul<span class="hljs-number"> 24 </span>13:16 data.log<br>drwx------.<span class="hljs-number"> 2 </span>gentoo  gentoo  <span class="hljs-number"> 62 </span>Jul<span class="hljs-number"> 24 </span>12:39 gentoo<br>drwx------.<span class="hljs-number"> 2 </span>test    test    <span class="hljs-number"> 99 </span>Jul<span class="hljs-number"> 24 </span>11:38 test<br>drwx------.<span class="hljs-number"> 2 </span>test1   test1   <span class="hljs-number"> 78 </span>Jul<span class="hljs-number"> 24 </span>11:24 test1<br>-rw-r--r--.<span class="hljs-number"> 1 </span>yuankun bin      <span class="hljs-number"> 0 </span>Jul<span class="hljs-number"> 24 </span>13:22 test.log<br>drwx------.<span class="hljs-number"> 2 </span>yuankun yuankun<span class="hljs-number"> 114 </span>Jul<span class="hljs-number"> 23 </span>08:24 yuankun<br>[root@rocky8 home]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658672628070.png" alt="1658672628070"></p><ul><li>修改为参考的所有者户所属组</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">chown --reference=root.<span class="hljs-built_in">log</span> <span class="hljs-keyword">data</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658672912639.png" alt="1658672912639"></p><ul><li>递归修改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R yuankun:yuankun ./data/mysql/<br></code></pre></td></tr></table></figure><p><img src="/../img/1658673109132.png" alt="1658673109132"></p><h4 id="7-6-1-2设置文件的属组信息chgrp"><a href="#7-6-1-2设置文件的属组信息chgrp" class="headerlink" title="7.6.1.2设置文件的属组信息chgrp"></a>7.6.1.2设置文件的属组信息chgrp</h4><p>chgrp 命令可以只修改文件的属组<br>格式:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">chgrp [OPTION]<span class="hljs-string">...</span> GROUP FILE.<span class="hljs-string">..</span><br>chgrp [OPTION]<span class="hljs-string">...</span> <span class="hljs-params">--reference=RFILE</span> FILE.<span class="hljs-string">..</span><br></code></pre></td></tr></table></figure><p>-R 递归</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chgrp</span> yuankun data.log<br></code></pre></td></tr></table></figure><p><img src="/../img/1658673362886.png" alt="1658673362886"></p><h3 id="7-6-2文件权限"><a href="#7-6-2文件权限" class="headerlink" title="7.6.2文件权限"></a>7.6.2文件权限</h3><p>每个文件针对每类访问者都定义了三种权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r</span> Readable <span class="hljs-number">4</span><br><span class="hljs-attribute">w</span> Writable <span class="hljs-number">2</span><br><span class="hljs-attribute">x</span> eXcutable <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>对文件的权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">r</span> 可使用文件查看类工具，比如：<span class="hljs-built_in">cat</span>，可以获取其内容<br>w 可修改其内容,文件的是否被删除和文件的权限无关<br>x 可以把此文件提请内核启动为一个进程，即可以执行（运行）此文件（此文件的内容必须是可执行）<br>文件权限常见组合<br><span class="hljs-literal">---</span> <span class="hljs-number">0</span><br><span class="hljs-built_in">r</span> <span class="hljs-number">4</span><br><span class="hljs-built_in">r</span><span class="hljs-literal">-x</span> <span class="hljs-number">5</span><br>rw <span class="hljs-number">6</span><br>rwx <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>对目录的权限</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm">r 可以使用ls查看此目录中文件名列表<span class="hljs-punctuation">,</span>但无法看到文件的属性meta信息<span class="hljs-punctuation">,</span>包括inode号<span class="hljs-punctuation">,</span>不能查看文件的<br>内容<br>w 可在此目录中创建文件，也可删除此目录中的文件，而和此被删除的文件的权限无关<br><span class="hljs-keyword">x</span> 可以cd进入此目录，可以使用ls -l file或stat file 查看此目录中指定文件的元数据，当预先知<br>道文件名称时<span class="hljs-punctuation">,</span>也可以查看文件的内容<span class="hljs-punctuation">,</span>属于目录的可访问的最小权限<br>X 分配给目录或有部分<span class="hljs-keyword">x</span>权限的文件的<span class="hljs-keyword">x</span>权限，对无任意<span class="hljs-keyword">x</span>权限的文件则不会分配<span class="hljs-keyword">x</span>权限<br>目录权限常见组合<br>- 不能访问目录<br>r-<span class="hljs-keyword">x</span> 只读目录<br>rwx 可读也可写目录<br></code></pre></td></tr></table></figure><p>面试题：Linux中的目录和文件的权限区别？分别说明读，写和执行权限的区别?</p><p>修改文件权限chmod</p><p>面试题：执行 cp &#x2F;etc&#x2F;issue &#x2F;data&#x2F;dir&#x2F; 所需要的最小权限？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux从入门到放弃</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2022/07/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/07/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-查看硬件信息"><a href="#1-查看硬件信息" class="headerlink" title="1.查看硬件信息"></a>1.查看硬件信息</h1><h3 id="1-1查看CPU信息"><a href="#1-1查看CPU信息" class="headerlink" title="1.1查看CPU信息"></a>1.1查看CPU信息</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lscpu</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658503779919.png" alt="1658503779919"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 该命令也可以</span><br>cat <span class="hljs-regexp">/proc/</span>cpuinfo<br></code></pre></td></tr></table></figure><h3 id="1-2查看内存信息"><a href="#1-2查看内存信息" class="headerlink" title="1.2查看内存信息"></a>1.2查看内存信息</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">free -h<br><span class="hljs-comment"># 或者</span><br>cat <span class="hljs-regexp">/proc/m</span>eminfo<br></code></pre></td></tr></table></figure><p><img src="/../img/1658504083814.png" alt="1658504083814"></p><h3 id="1-3查看硬盘信息和分区情况"><a href="#1-3查看硬盘信息和分区情况" class="headerlink" title="1.3查看硬盘信息和分区情况"></a>1.3查看硬盘信息和分区情况</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsblk</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658504188384.png" alt="1658504188384"></p><h1 id="2-查看系统信息"><a href="#2-查看系统信息" class="headerlink" title="2.查看系统信息"></a>2.查看系统信息</h1><h3 id="2-1查看系统架构"><a href="#2-1查看系统架构" class="headerlink" title="2.1查看系统架构"></a>2.1查看系统架构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">arch</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658504368189.png" alt="1658504368189"></p><h3 id="2-2查看内核版本"><a href="#2-2查看内核版本" class="headerlink" title="2.2查看内核版本"></a>2.2查看内核版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><p><img src="/../img/1658504429024.png" alt="1658504429024"></p><h3 id="2-3查看操作系统发行版本"><a href="#2-3查看操作系统发行版本" class="headerlink" title="2.3查看操作系统发行版本"></a>2.3查看操作系统发行版本</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>os-releases<br></code></pre></td></tr></table></figure><p><img src="/../img/1658543618611.png" alt="1658543618611"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/i</span>ssue<br></code></pre></td></tr></table></figure><p><img src="/../img/1658543863373.png" alt="1658543863373"></p><h3 id="2-4修改登录后显示的内容"><a href="#2-4修改登录后显示的内容" class="headerlink" title="2.4修改登录后显示的内容"></a>2.4修改登录后显示的内容</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># 修改<span class="hljs-regexp">/etc/m</span>otd文件内容<br>vi <span class="hljs-regexp">/etc/m</span>otd<br></code></pre></td></tr></table></figure><h3 id="2-5-查看硬件时间"><a href="#2-5-查看硬件时间" class="headerlink" title="2.5 查看硬件时间"></a>2.5 查看硬件时间</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">clock</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658544469113.png" alt="1658544469113"></p><h3 id="2-6重启和关机"><a href="#2-6重启和关机" class="headerlink" title="2.6重启和关机"></a>2.6重启和关机</h3><h6 id="2-6-1重启"><a href="#2-6-1重启" class="headerlink" title="2.6.1重启"></a>2.6.1重启</h6><ul><li><p>halt</p></li><li><p>reboot</p></li></ul><h6 id="2-6-2关机或重启"><a href="#2-6-2关机或重启" class="headerlink" title="2.6.2关机或重启"></a>2.6.2关机或重启</h6><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">shutdown</span>  <br>- r :重启<br>- h :关机<br>指定时间关机或重启<br><span class="hljs-built_in">shutdown</span> -r <span class="hljs-number">15</span>:<span class="hljs-number">00</span>  <span class="hljs-meta"># 15:00重启</span><br><span class="hljs-built_in">shutdown</span> -h <span class="hljs-number">15</span>:<span class="hljs-number">00</span>  <span class="hljs-meta"># 15:00关机</span><br><br><span class="hljs-built_in">shutdown</span> -c <span class="hljs-meta"># 取消</span><br></code></pre></td></tr></table></figure><h1 id="3-bash快捷键"><a href="#3-bash快捷键" class="headerlink" title="3.bash快捷键"></a>3.bash快捷键</h1><p>  <img src="/../img/1658565274290.png" alt="1658565274290"></p><p>  <img src="/../img/1658565308571.png" alt="1658565308571"></p><p><img src="/../img/1658565339834.png" alt="1658565339834"></p><p><img src="/../img/1658565370990.png" alt="1658565370990"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux从入门到放弃</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础入门</title>
    <link href="/2022/07/21/Linux%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2022/07/21/Linux%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基础使用命令"><a href="#1-基础使用命令" class="headerlink" title="1.基础使用命令"></a>1.基础使用命令</h1><ul><li>查看网络ip地址</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ip <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658410435937.png" alt="Rocky8.6"></p><p><img src="/../img/1658410871193.png" alt="ubuntu2004"></p><ul><li>重启</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><ul><li><p>ubuntu使用xshell-root账户进行远程登录修改方法</p><ul><li>切换到root账户</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo -<span class="hljs-selector-tag">i</span><br></code></pre></td></tr></table></figure><p> <img src="/../img/1658411472195.png" alt="1658411472195"></p><ul><li>设置密码</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">passwd</span> 用户名  <br></code></pre></td></tr></table></figure><p> <img src="/../img/1658469211139.png" alt="1658469211139"></p><ul><li>修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config  ,PermitRootlogin yes</li></ul><p> <img src="/../img/1658493609190.png" alt="1658493609190"></p><ul><li>重启sshd</li></ul></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart sshd</span><br></code></pre></td></tr></table></figure><ul><li><p>查看当前所在终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tty</span><br></code></pre></td></tr></table></figure><p> <img src="/../img/1658494268286.png" alt="1658494268286"></p></li><li><p>查看当前账户</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br><br><span class="hljs-built_in">who</span> am i  <br><br><span class="hljs-built_in">who</span><br></code></pre></td></tr></table></figure><p> <img src="/../img/1658494603337.png" alt="1658494603337"></p><p> <img src="/../img/1658494650023.png" alt="1658494650023"></p><p> <img src="/../img/1658495293952.png#pic_left" alt="1658495293952"></p><ul><li>查看当前时间</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658494753358.png" alt="1658494753358"></p><ul><li>ubuntu修改时区 ,修改为北京时间</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">timedatectl</span> <span class="hljs-built_in">set-timezone</span> <span class="hljs-string">Asia</span>/<span class="hljs-string">Shanghai</span><br><span class="hljs-string">date</span><span class="hljs-comment"># 查看当前时间</span><br></code></pre></td></tr></table></figure><p> <img src="/../img/1658495063470.png#pic_left" alt="1658495063470"></p><ul><li>查看当前系统使用的shell</li></ul><img src= '../img/1658495913197.png' style='float:left'><ul><li>查看当前主机名</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hostname</span><br></code></pre></td></tr></table></figure><p>   <img src="/../img/1658496336793.png" alt="1658496336793"></p><ul><li>修改当前主机名称，永久修改</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> 名称<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 临时修改，重启后变为修改前的主机名称</span><br><span class="hljs-attribute">hostname</span> 主机名<br></code></pre></td></tr></table></figure><ul><li>查看所有内部命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658499412357.png" alt="1658499412357"></p><ul><li>查看命令为内部还是外部命令</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">type</span> 命令名称</span><br><span class="hljs-meta"># 示例</span><br><span class="hljs-class"><span class="hljs-keyword">type</span> cd</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658499521622.png" alt="1658499521622"></p><ul><li>查看系统中所有别名</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">alias</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658499933136.png" alt="1658499933136"></p><ul><li>设置别名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> 别名名称 = <span class="hljs-string">&#x27;被设置别名的行为&#x27;</span><br><span class="hljs-comment"># 示例</span><br><span class="hljs-built_in">alias</span> cdnt = <span class="hljs-string">&#x27;cd /root&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>删除别名</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">unalisa</span> 别名名称<br></code></pre></td></tr></table></figure><ul><li><p>命令种类</p><ul><li>alias(优先级最高)</li><li>内部命令(优先级低于alias)</li><li>外部命令(优先级最低)</li></ul></li><li><p>whatis</p></li></ul><p>whatis使用数据库来显示命令的简短描述  </p><p>此工具在系统刚安装后不可立即使用，需要制作数据库后才可使用  </p><p>执行下面的命令生成数据库  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># centos7版本以后</span><br><span class="hljs-attribute">mandb</span><br><span class="hljs-comment"># centos6版本之前</span><br>makewhatis<br></code></pre></td></tr></table></figure><p><img src="/../img/1658501366408.png" alt="1658501366408"></p><ul><li>内部命令查看帮助</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用type命令查看是否为内部命令，不是内部命令不能使用该命令</span><br><span class="hljs-built_in">help</span> <span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><p>范例  </p><p><img src="/../img/1658501682712.png" alt="1658501682712"></p><ul><li>外部命令使用帮助</li></ul><p>COMMAND –help 或者 COMMAND -h  </p><p>范例  </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> <span class="hljs-comment">--help</span><br></code></pre></td></tr></table></figure><p><img src="/../img/1658502390672.png" alt="1658502390672"></p><ul><li>man</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">man <span class="hljs-built_in">date</span><br>man <span class="hljs-number">1</span> <span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础和Linux安装</title>
    <link href="/2022/07/18/linux%E5%9F%BA%E7%A1%80%E5%92%8CLinux%E5%AE%89%E8%A3%85/"/>
    <url>/2022/07/18/linux%E5%9F%BA%E7%A1%80%E5%92%8CLinux%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1-冯诺依曼体系"><a href="#1-冯诺依曼体系" class="headerlink" title="1.冯诺依曼体系"></a>1.冯诺依曼体系</h1><p>1946年美籍匈牙利数学家冯·诺依曼于提出存储程序原理，把程序本身当作数据来对待，程序和该程序处<br>理的数据用同样的方式储存。 冯·诺依曼体系的要点是：</p><ul><li><p>数字计算机的数制采用二进制，bit 位, byte 字节 1 byte &#x3D;8 bit</p></li><li><p>计算机应该按照程序顺序执行</p></li><li><p>计算机硬件由运算器、控制器、存储器、输入设备和输出设备五大部分组成</p></li></ul><h3 id="计算机的硬件五个组件"><a href="#计算机的硬件五个组件" class="headerlink" title="计算机的硬件五个组件"></a>计算机的硬件五个组件</h3><ul><li><p>控制器: 指挥系统</p></li><li><p>运算器: 数学和逻辑运算</p></li><li><p>存储器: 存储信息</p></li><li><p>输入设备: 接收外部信息</p></li><li><p>输出设备: 输出计算机内部信息到外部设备</p></li></ul><h1 id="2-服务器按外观类型分类"><a href="#2-服务器按外观类型分类" class="headerlink" title="2.服务器按外观类型分类"></a>2.服务器按外观类型分类</h1><h3 id="PC服务器常见的三种外观"><a href="#PC服务器常见的三种外观" class="headerlink" title="PC服务器常见的三种外观"></a>PC服务器常见的三种外观</h3><ul><li><p>塔式服务器</p></li><li><p>刀片式服务器</p></li><li><p>机架式服务器</p></li></ul><h1 id="3-操作系统和Linux安装"><a href="#3-操作系统和Linux安装" class="headerlink" title="3.操作系统和Linux安装"></a>3.操作系统和Linux安装</h1><h3 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h3><p><img src="/../img/1658235191431.png" alt="1658235191431"></p><p>主要作用 </p><ul><li><p>硬件驱动</p></li><li><p>进程管理</p></li><li><p>内存管理</p></li><li><p>网络管理</p></li><li><p>安全管理</p></li><li><p>文件管理</p></li></ul><h3 id="unix哲学思想"><a href="#unix哲学思想" class="headerlink" title="unix哲学思想"></a>unix哲学思想</h3><ul><li>一切都是一个文件(包括硬件)</li><li>小型，单一用途的程序  </li><li>链接程序，共同完成复杂的任务(shell脚本)</li><li>避免令人困惑的用户界面  </li><li>配置数据存储在文本中</li></ul><h1 id="4-常见面试题"><a href="#4-常见面试题" class="headerlink" title="4.常见面试题"></a>4.常见面试题</h1><p><img src="/../img/1658241769096.png" alt="1658241769096"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>看完这篇还敢说你不会git生成ssh密钥</title>
    <link href="/2022/07/13/git-ssh/"/>
    <url>/2022/07/13/git-ssh/</url>
    
    <content type="html"><![CDATA[<!--more--><ul><li>注：以下命令全部在git bash完成</li></ul><h1 id="1-查看是否配置邮箱和用户名"><a href="#1-查看是否配置邮箱和用户名" class="headerlink" title="1.查看是否配置邮箱和用户名"></a>1.查看是否配置邮箱和用户名</h1><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git config</span> <span class="hljs-literal">--</span><span class="hljs-comment">global</span>  <span class="hljs-literal">--</span><span class="hljs-comment">list</span><br></code></pre></td></tr></table></figure><p>如图所示，则代表已经配置完成<br><img src="/../img/1657717726161.png" alt="1657717726161"></p><h1 id="2-配置用户名和邮箱"><a href="#2-配置用户名和邮箱" class="headerlink" title="2.配置用户名和邮箱"></a>2.配置用户名和邮箱</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span>  user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;这里换上你的用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;这里换上你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><h1 id="3-查看是否已经生成密钥"><a href="#3-查看是否已经生成密钥" class="headerlink" title="3.查看是否已经生成密钥"></a>3.查看是否已经生成密钥</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git ~/.ssh<br><span class="hljs-built_in">ls</span> -ah<br></code></pre></td></tr></table></figure><p>如图所示，代表已经生成密钥  </p><p><img src="/../img/1657718034760.png" alt="1657718034760"></p><ul><li>id_rsa文件是私钥，要保存好，放在本地，私钥可以生产公钥，反之不行。</li><li>id_rsa.pub文件是公钥，可以用于发送到其他服务器，或者git上</li></ul><h1 id="4-生成密钥"><a href="#4-生成密钥" class="headerlink" title="4.生成密钥"></a>4.生成密钥</h1><ul><li>执行ssh-keygen -t rsa -c</li></ul><pre><code class="hljs">ssh-keygen -t rsa -c &quot;这是你的邮箱&quot;  </code></pre><p><img src="https://img-blog.csdnimg.cn/2020061522162896.png">  </p><ul><li>点击enter,输入密码</li></ul><p><img src="https://img-blog.csdnimg.cn/2020061522182269.png">  </p><ul><li>点击enter，确认密码</li></ul><p><img src="https://img-blog.csdnimg.cn/20200615221909168.png">  </p><ul><li>如图，创建成功</li></ul><p><img src="/../img/1657719024137.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>看完这篇HTTP，跟面试官扯皮就没问题了</title>
    <link href="/2022/07/09/http/"/>
    <url>/2022/07/09/http/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <h1 id="1-认识http"><a href="#1-认识http" class="headerlink" title="1.认识http"></a>1.认识http</h1>          </div>  <p style="text-indent:2em">首先你听的最多的应该就是 HTTP 是一种 超文本传输协议(Hypertext Transfer Protocol)，这你一定能说出来，但是这样还不够，假如你是大厂面试官，这不可能是他想要的最终结果，我们在面试的时候往往把自己知道的尽可能多的说出来，才有和面试官谈价钱的资本。那么什么是超文本传输协议？</p>  超文本传输协议可以进行文字分割：超文本（Hypertext）、传输（Transfer）、协议（Protocol），它们之间的关系如下   <p>按照范围的大小 协议 &gt; 传输 &gt; 超文本。下面就分别对这三个名次做一个解释。  </p><div class="note note-success">            <h2 id="1-1什么是超文本"><a href="#1-1什么是超文本" class="headerlink" title="1.1什么是超文本"></a>1.1什么是超文本</h2>          </div> <p>&amp;emsp;&amp;emsp;在互联网早期的时候，我们输入的信息只能保存在本地，无法和其他电脑进行交互。我们保存的信息通常都以文本即简单字符的形式存在，文本是一种能够被计算机解析的有意义的二进制数据包。而随着互联网的高速发展，两台电脑之间能够进行数据的传输后，人们不满足只能在两台电脑之间传输文字，还想要传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，那么文本的语义就被扩大了，这种语义扩大后的文本就被称为超文本(Hypertext)。</p><p>什么是传输<br>那么我们上面说到，两台计算机之间会形成互联关系进行通信，我们存储的超文本会被解析成为二进制数据包，由传输载体（例如同轴电缆，电话线，光缆）负责把二进制数据包由计算机终端传输到另一个终端的过程（对终端的详细解释可以参考 你说你懂互联网，那这些你知道么？这篇文章）称为传输(transfer)。</p><p>通常我们把传输数据包的一方称为请求方，把接到二进制数据包的一方称为应答方。请求方和应答方可以进行互换，请求方也可以作为应答方接受数据，应答方也可以作为请求方请求数据，它们之间的关系如下</p><p>如图所示，A 和 B 是两个不同的端系统，它们之间可以作为信息交换的载体存在，刚开始的时候是 A 作为请求方请求与 B 交换信息，B 作为响应的一方提供信息；随着时间的推移，B 也可以作为请求方请求 A 交换信息，那么 A 也可以作为响应方响应 B 请求的信息。</p><p>什么是协议<br>协议这个名词不仅局限于互联网范畴，也体现在日常生活中，比如情侣双方约定好在哪个地点吃饭，这个约定也是一种协议，比如你应聘成功了，企业会和你签订劳动合同，这种双方的雇佣关系也是一种 协议。注意自己一个人对自己的约定不能成为协议，协议的前提条件必须是多人约定。</p><p>那么网络协议是什么呢？</p><p>网络协议就是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。</p><p>没有网络协议的互联网是混乱的，就和人类社会一样，人不能想怎么样就怎么样，你的行为约束是受到法律的约束的；那么互联网中的端系统也不能自己想发什么发什么，也是需要受到通信协议约束的。</p><p>那么我们就可以总结一下，什么是 HTTP？可以用下面这个经典的总结回答一下： HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</p><p>与 HTTP 有关的组件<br>随着网络世界演进，HTTP 协议已经几乎成为不可替代的一种协议，在了解了 HTTP 的基本组成后，下面再来带你进一步认识一下 HTTP 协议。</p><p>网络模型<br>网络是一个复杂的系统，不仅包括大量的应用程序、端系统、通信链路、分组交换机等，还有各种各样的协议组成，那么现在我们就来聊一下网络中的协议层次。</p><p>为了给网络协议的设计提供一个结构，网络设计者以分层(layer)的方式组织协议，每个协议属于层次模型之一。每一层都是向它的上一层提供服务(service)，即所谓的服务模型(service model)。每个分层中所有的协议称为 协议栈(protocol stack)。因特网的协议栈由五个部分组成：物理层、链路层、网络层、运输层和应用层。我们采用自上而下的方法研究其原理，也就是应用层 -&gt; 物理层的方式。</p><p>应用层<br>应用层是网络应用程序和网络协议存放的分层，因特网的应用层包括许多协议，例如我们学 web 离不开的 HTTP，电子邮件传送协议 SMTP、端系统文件上传协议 FTP、还有为我们进行域名解析的 DNS 协议。应用层协议分布在多个端系统上，一个端系统应用程序与另外一个端系统应用程序交换信息分组，我们把位于应用层的信息分组称为 报文(message)。</p><p>运输层<br>因特网的运输层在应用程序断点之间传送应用程序报文，在这一层主要有两种传输协议 TCP和 UDP，利用这两者中的任何一个都能够传输报文，不过这两种协议有巨大的不同。</p><p>TCP 向它的应用程序提供了面向连接的服务，它能够控制并确认报文是否到达，并提供了拥塞机制来控制网络传输，因此当网络拥塞时，会抑制其传输速率。</p><p>UDP 协议向它的应用程序提供了无连接服务。它不具备可靠性的特征，没有流量控制，也没有拥塞控制。我们把运输层的分组称为 报文段(segment)</p><p>网络层<br>因特网的网络层负责将称为 数据报(datagram) 的网络分层从一台主机移动到另一台主机。网络层一个非常重要的协议是 IP 协议，所有具有网络层的因特网组件都必须运行 IP 协议，IP 协议是一种网际协议，除了 IP 协议外，网络层还包括一些其他网际协议和路由选择协议，一般把网络层就称为 IP 层，由此可知 IP 协议的重要性。</p><p>链路层<br>现在我们有应用程序通信的协议，有了给应用程序提供运输的协议，还有了用于约定发送位置的 IP 协议，那么如何才能真正的发送数据呢？为了将分组从一个节点（主机或路由器）运输到另一个节点，网络层必须依靠链路层提供服务。链路层的例子包括以太网、WiFi 和电缆接入的 DOCSIS 协议，因为数据从源目的地传送通常需要经过几条链路，一个数据包可能被沿途不同的链路层协议处理，我们把链路层的分组称为 帧(frame)</p><p>物理层<br>虽然链路层的作用是将帧从一个端系统运输到另一个端系统，而物理层的作用是将帧中的一个个 比特 从一个节点运输到另一个节点，物理层的协议仍然使用链路层协议，这些协议与实际的物理传输介质有关，例如，以太网有很多物理层协议：关于双绞铜线、关于同轴电缆、关于光纤等等。</p><p>五层网络协议的示意图如下</p><p>OSI 模型<br>我们上面讨论的计算网络协议模型不是唯一的 协议栈，ISO（国际标准化组织）提出来计算机网络应该按照7层来组织，那么7层网络协议栈与5层的区别在哪里？</p><p>从图中可以一眼看出，OSI 要比上面的网络模型多了 表示层 和 会话层，其他层基本一致。表示层主要包括数据压缩和数据加密以及数据描述，数据描述使得应用程序不必担心计算机内部存储格式的问题，而会话层提供了数据交换的定界和同步功能，包括建立检查点和恢复方案。</p><p>浏览器<br>就如同各大邮箱使用电子邮件传送协议 SMTP 一样，浏览器是使用 HTTP 协议的主要载体，说到浏览器，你能想起来几种？是的，随着网景大战结束后，浏览器迅速发展，至今已经出现过的浏览器主要有</p><p>浏览器正式的名字叫做 Web Broser，顾名思义，就是检索、查看互联网上网页资源的应用程序，名字里的 Web，实际上指的就是 World Wide Web，也就是万维网。</p><p>我们在地址栏输入URL（即网址），浏览器会向DNS（域名服务器，后面会说）提供网址，由它来完成 URL 到 IP 地址的映射。然后将请求你的请求提交给具体的服务器，在由服务器返回我们要的结果（以HTML编码格式返回给浏览器），浏览器执行HTML编码，将结果显示在浏览器的正文。这就是一个浏览器发起请求和接受响应的过程。</p><p>Web 服务器<br>Web 服务器的正式名称叫做 Web Server，Web 服务器一般指的是网站服务器，上面说到浏览器是 HTTP 请求的发起方，那么 Web 服务器就是 HTTP 请求的应答方，Web 服务器可以向浏览器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache、 Nginx 、IIS。</p><p>CDN<br>CDN的全称是Content Delivery Network，即内容分发网络，它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。CDN 是构建在现有网络基础之上的网络，它依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>打比方说你要去亚马逊上买书，之前你只能通过购物网站购买后从美国发货过海关等重重关卡送到你的家里，现在在中国建立一个亚马逊分基地，你就不用通过美国进行邮寄，从中国就能把书尽快给你送到。</p><p>WAF<br>WAF 是一种 Web 应用程序防护系统（Web Application Firewall，简称 WAF），它是一种通过执行一系列针对HTTP &#x2F; HTTPS的安全策略来专门为Web应用提供保护的一款产品，它是应用层面的防火墙，专门检测 HTTP 流量，是防护 Web 应用的安全技术。</p><p>WAF 通常位于 Web 服务器之前，可以阻止如 SQL 注入、跨站脚本等攻击，目前应用较多的一个开源项目是 ModSecurity，它能够完全集成进 Apache 或 Nginx。</p><p>WebService<br>WebService 是一种 Web 应用程序，WebService是一种跨编程语言和跨操作系统平台的远程调用技术。</p><p>Web Service 是一种由 W3C 定义的应用服务开发规范，使用 client-server 主从架构，通常使用 WSDL 定义服务接口，使用 HTTP 协议传输 XML 或 SOAP 消息，它是一个基于 Web（HTTP）的服务架构技术，既可以运行在内网，也可以在适当保护后运行在外网。</p><p>HTML<br>HTML 称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的 Internet 资源连接为一个逻辑整体。HTML 文本是由 HTML 命令组成的描述性文本，HTML 命令可以说明文字，图形、动画、声音、表格、链接等。</p><p>Web 页面构成<br>Web 页面（Web page）也叫做文档，是由一个个对象组成的。一个对象(Objecy) 只是一个文件，比如一个 HTML 文件、一个 JPEG 图形、一个 Java 小程序或一个视频片段，它们在网络中可以通过 URL 地址寻址。多数的 Web 页面含有一个 HTML 基本文件 以及几个引用对象。</p><p>举个例子，如果一个 Web 页面包含 HTML 文件和5个 JPEG 图形，那么这个 Web 页面就有6个对象：一个 HTML 文件和5个 JPEG 图形。HTML 基本文件通过 URL 地址引用页面中的其他对象。</p><p>与 HTTP 有关的协议<br>在互联网中，任何协议都不会单独的完成信息交换，HTTP 也一样。虽然 HTTP 属于应用层的协议，但是它仍然需要其他层次协议的配合完成信息的交换，那么在完成一次 HTTP 请求和响应的过程中，需要哪些协议的配合呢？一起来看一下</p><p>TCP&#x2F;IP<br>TCP&#x2F;IP 协议你一定听过，TCP&#x2F;IP 我们一般称之为协议簇，什么意思呢？就是 TCP&#x2F;IP 协议簇中不仅仅只有 TCP 协议和 IP 协议，它是一系列网络通信协议的统称。而其中最核心的两个协议就是 TCP &#x2F; IP 协议，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。</p><p>TCP 协议的全称是 Transmission Control Protocol 的缩写，意思是传输控制协议，HTTP 使用 TCP 作为通信协议，这是因为 TCP 是一种可靠的协议，而可靠能保证数据不丢失。</p><p>IP 协议的全称是 Internet Protocol 的缩写，它主要解决的是通信双方寻址的问题。IP 协议使用 IP 地址 来标识互联网上的每一台计算机，可以把 IP 地址想象成为你手机的电话号码，你要与他人通话必须先要知道他人的手机号码，计算机网络中信息交换必须先要知道对方的 IP 地址。（关于 TCP 和 IP 更多的讨论我们会在后面详解）</p><p>DNS<br>你有没有想过为什么你可以通过键入 <a href="http://www.google.com/">www.google.com</a> 就能够获取你想要的网站？我们上面说到，计算机网络中的每个端系统都有一个 IP 地址存在，而把 IP 地址转换为便于人类记忆的协议就是 DNS 协议。</p><p>DNS 的全称是域名系统（Domain Name System，缩写：DNS），它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p><p>URI &#x2F; URL<br>我们上面提到，你可以通过输入 <a href="http://www.google.com/">www.google.com</a> 地址来访问谷歌的官网，那么这个地址有什么规定吗？我怎么输都可以？AAA.BBB.CCC 是不是也行？当然不是的，你输入的地址格式必须要满足 URI 的规范。</p><p>URI的全称是（Uniform Resource Identifier），中文名称是统一资源标识符，使用它就能够唯一地标记互联网上资源。</p><p>URL的全称是（Uniform Resource Locator），中文名称是统一资源定位符，也就是我们俗称的网址，它实际上是 URI 的一个子集。</p><p>URI 不仅包括 URL，还包括 URN（统一资源名称），它们之间的关系如下</p><p>HTTPS<br>HTTP 一般是明文传输，很容易被攻击者窃取重要信息，鉴于此，HTTPS 应运而生。HTTPS 的全称为 （Hyper Text Transfer Protocol over SecureSocket Layer），全称有点长，HTTPS 和 HTTP 有很大的不同在于 HTTPS 是以安全为目标的 HTTP 通道，在 HTTP 的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在 HTTP 的基础上增加了 SSL 层，也就是说 HTTPS &#x3D; HTTP + SSL。（这块我们后面也会详谈 HTTPS）</p><p>HTTP 请求响应过程<br>你是不是很好奇，当你在浏览器中输入网址后，到底发生了什么事情？你想要的内容是如何展现出来的？让我们通过一个例子来探讨一下，我们假设访问的 URL 地址为 <a href="http://www.someschool.edu/someDepartment/home.index%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%B9%B6%E7%82%B9%E5%87%BB%E5%9B%9E%E8%BD%A6%E6%97%B6%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E9%83%A8%E4%BC%9A%E8%BF%9B%E8%A1%8C%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C">http://www.someSchool.edu/someDepartment/home.index，当我们输入网址并点击回车时，浏览器内部会进行如下操作</a></p><p>DNS服务器会首先进行域名的映射，找到访问<a href="http://www.someschool.edu所在的地址,然后http/">www.someSchool.edu所在的地址，然后HTTP</a> 客户端进程在 80 端口发起一个到服务器 <a href="http://www.someschool.edu/">www.someSchool.edu</a> 的 TCP 连接（80 端口是 HTTP 的默认端口）。在客户和服务器进程中都会有一个套接字与其相连。<br>HTTP 客户端通过它的套接字向服务器发送一个 HTTP 请求报文。该报文中包含了路径 someDepartment&#x2F;home.index 的资源，我们后面会详细讨论 HTTP 请求报文。<br>HTTP 服务器通过它的套接字接受该报文，进行请求的解析工作，并从其存储器(RAM 或磁盘)中检索出对象 <a href="http://www.someschool.edu/someDepartment/home.index%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8A%8A%E6%A3%80%E7%B4%A2%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85%EF%BC%8C%E5%B0%81%E8%A3%85%E5%88%B0">www.someSchool.edu/someDepartment/home.index，然后把检索出来的对象进行封装，封装到</a> HTTP 响应报文中，并通过套接字向客户进行发送。<br>HTTP 服务器随即通知 TCP 断开 TCP 连接，实际上是需要等到客户接受完响应报文后才会断开 TCP 连接。<br>HTTP 客户端接受完响应报文后，TCP 连接会关闭。HTTP 客户端从响应中提取出报文中是一个 HTML 响应文件，并检查该 HTML 文件，然后循环检查报文中其他内部对象。<br>检查完成后，HTTP 客户端会把对应的资源通过显示器呈现给用户。<br>至此，键入网址再按下回车的全过程就结束了。上述过程描述的是一种简单的请求-响应全过程，真实的请求-响应情况可能要比上面描述的过程复杂很多。</p><p>HTTP 请求特征<br>从上面整个过程中我们可以总结出 HTTP 进行分组传输是具有以下特征</p><p>支持客户-服务器模式<br>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。<br>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。<br>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>无状态：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>详解 HTTP 报文<br>我们上面描述了一下 HTTP 的请求响应过程，流程比较简单，但是凡事就怕认真，你这一认真，就能拓展出很多东西，比如 HTTP 报文是什么样的，它的组成格式是什么？ 下面就来探讨一下</p><p>HTTP 协议主要由三大部分组成：</p><p>起始行（start line）：描述请求或响应的基本信息；<br>头部字段（header）：使用 key-value 形式更详细地说明报文；<br>消息正文（entity）：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。<br>其中起始行和头部字段并成为 请求头 或者 响应头，统称为 Header；消息正文也叫做实体，称为 body。HTTP 协议规定每次发送的报文必须要有 Header，但是可以没有 body，也就是说头信息是必须的，实体信息可以没有。而且在 header 和 body 之间必须要有一个空行（CRLF），如果用一幅图来表示一下的话，我觉得应该是下面这样</p><p>我们使用上面的那个例子来看一下 http 的请求报文</p><p>如图，这是 <a href="http://www.someschool.edu/someDepartment/home.index">http://www.someSchool.edu/someDepartment/home.index</a> 请求的请求头，通过观察这个 HTTP 报文我们就能够学到很多东西，首先，我们看到报文是用普通 ASCII 文本书写的，这样保证人能够可以看懂。然后，我们可以看到每一行和下一行之间都会有换行，而且最后一行（请求头部后）再加上一个回车换行符。</p><p>每个报文的起始行都是由三个字段组成：方法、URL 字段和 HTTP 版本字段。</p><p>HTTP 请求方法<br>HTTP 请求方法一般分为 8 种，它们分别是</p><p>GET 获取资源，GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；</p><p>POST 传输实体，虽然 GET 方法也可以传输主体信息，但是便于区分，我们一般不用 GET 传输实体信息，反而使用 POST 传输实体信息，</p><p>PUT 传输文件，PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。</p><p>但是，鉴于 HTTP 的 PUT 方法自身不带验证机制，任何人都可以上传文件 , 存在安全性问题，因此一般的 W eb 网站不使用该方法。若配合 W eb 应用程序的验证机制，或架构设计采用REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。</p><p>HEAD 获得响应首部，HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p><p>DELETE 删除文件，DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。</p><p>OPTIONS 询问支持的方法，OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。</p><p>TRACE 追踪路径，TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。</p><p>CONNECT 要求用隧道协议连接代理，CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加 密后经网络隧道传输。</p><p>我们一般最常用的方法也就是 GET 方法和 POST 方法，其他方法暂时了解即可。下面是 HTTP1.0 和 HTTP1.1 支持的方法清单</p><p>HTTP 请求 URL<br>HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。URL 带有请求对象的标识符。在上面的例子中，浏览器正在请求对象 &#x2F;somedir&#x2F;page.html 的资源。</p><p>我们再通过一个完整的域名解析一下 URL</p><p>比如 <a href="http://www.example.com/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument">http://www.example.com:80/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument</a> 这个 URL 比较繁琐了吧，你把这个 URL 搞懂了其他的 URL 也就不成问题了。</p><p>首先出场的是 http</p><p>http:&#x2F;&#x2F;告诉浏览器使用何种协议。对于大部分 Web 资源，通常使用 HTTP 协议或其安全版本，HTTPS 协议。另外，浏览器也知道如何处理其他协议。例如， mailto: 协议指示浏览器打开邮件客户端；ftp:协议指示浏览器处理文件传输。</p><p>第二个出场的是 主机</p><p><a href="http://www.example.com/">www.example.com</a> 既是一个域名，也代表管理该域名的机构。它指示了需要向网络上的哪一台主机发起请求。当然，也可以直接向主机的 IP address 地址发起请求。但直接使用 IP 地址的场景并不常见。</p><p>第三个出场的是 端口</p><p>我们前面说到，两个主机之间要发起 TCP 连接需要两个条件，主机 + 端口。它表示用于访问 Web 服务器上资源的入口。如果访问的该 Web 服务器使用HTTP协议的标准端口（HTTP为80，HTTPS为443）授予对其资源的访问权限，则通常省略此部分。否则端口就是 URI 必须的部分。</p><p>上面是请求 URL 所必须包含的部分，下面就是 URL 具体请求资源路径</p><p>第四个出场的是 路径</p><p>&#x2F;path&#x2F;to&#x2F;myfile.html 是 Web 服务器上资源的路径。以端口后面的第一个 &#x2F; 开始，到 ? 号之前结束，中间的 每一个&#x2F; 都代表了层级（上下级）关系。这个 URL 的请求资源是一个 html 页面。</p><p>紧跟着路径后面的是 查询参数</p><p>?key1&#x3D;value1&amp;key2&#x3D;value2 是提供给 Web 服务器的额外参数。如果是 GET 请求，一般带有请求 URL 参数，如果是 POST 请求，则不会在路径后面直接加参数。这些参数是用 &amp; 符号分隔的键&#x2F;值对列表。key1 &#x3D; value1 是第一对，key2 &#x3D; value2 是第二对参数</p><p>紧跟着参数的是锚点</p><p>#SomewhereInTheDocument 是资源本身的某一部分的一个锚点。锚点代表资源内的一种“书签”，它给予浏览器显示位于该“加书签”点的内容的指示。 例如，在HTML文档上，浏览器将滚动到定义锚点的那个点上；在视频或音频文档上，浏览器将转到锚点代表的那个时间。值得注意的是 # 号后面的部分，也称为片段标识符，永远不会与请求一起发送到服务器。</p><p>HTTP 版本<br>表示报文使用的 HTTP 协议版本。</p><p>请求头部<br>这部分内容只是大致介绍一下，内容较多，后面会再以一篇文章详述</p><p>在表述完了起始行之后我们再来看一下请求头部，现在我们向上找，找到<a href="http://www.someschool.edu/someDepartment/home.index%EF%BC%8C%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%AE%83%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8">http://www.someSchool.edu/someDepartment/home.index，来看一下它的请求头部</a></p><p>Host: <a href="http://www.someschool.edu/">www.someschool.edu</a><br>Connection: close<br>User-agent: Mozilla&#x2F;5.0<br>Accept-language: fr<br>1<br>2<br>3<br>4<br>这个请求头信息比较少，首先 Host 表示的是对象所在的主机。你也许认为这个 Host 是不需要的，因为 URL 不是已经指明了请求对象的路径了吗？这个首部行提供的信息是 Web 代理高速缓存所需要的。Connection: close 表示的是浏览器需要告诉服务器使用的是非持久连接。它要求服务器在发送完响应的对象后就关闭连接。User-agent: 这是请求头用来告诉 Web 服务器，浏览器使用的类型是 Mozilla&#x2F;5.0，即 Firefox 浏览器。Accept-language 告诉 Web 服务器，浏览器想要得到对象的法语版本，前提是服务器需要支持法语类型，否则将会发送服务器的默认版本。下面我们针对主要的实体字段进行介绍（具体的可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a> MDN 官网学习）</p><p>HTTP 的请求标头分为四种： 通用标头、请求标头、响应标头 和 实体标头，依次来进行详解。</p><p>通用标头<br>通用标头主要有三个，分别是 Date、Cache-Control 和 Connection</p><p>Date</p><p>Date 是一个通用标头，它可以出现在请求标头和响应标头中，它的基本表示如下</p><p>Date: Wed, 21 Oct 2015 07:28:00 GMT<br>1<br>表示的是格林威治标准时间，这个时间要比北京时间慢八个小时</p><p>Cache-Control</p><p>Cache-Control 是一个通用标头，他可以出现在请求标头和响应标头中，Cache-Control 的种类比较多，虽然说这是一个通用标头，但是又一些特性是请求标头具有的，有一些是响应标头才有的。主要大类有 可缓存性、阈值性、 重新验证并重新加载 和其他特性</p><p>可缓存性是唯一响应标头才具有的特性，我们会在响应标头中详述。</p><p>阈值性，这个我翻译可能不准确，它的原英文是 Expiration，我是根据它的值来翻译的，你看到这些值可能会觉得我翻译的有点道理</p><p>max-age: 资源被认为仍然有效的最长时间，与 Expires 不同，这个请求是相对于 request标头的时间，而 Expires 是相对于响应标头。（请求标头）<br>s-maxage: 重写了 max-age 和 Expires 请求头，仅仅适用于共享缓存，被私有缓存所忽略（这块不理解，看完响应头的 Cache-Control 再进行理解）（请求标头）<br>max-stale：表示客户端将接受的最大响应时间，以秒为单位。（响应标头）<br>min-fresh: 表示客户端希望响应在指定的最小时间内有效。（响应标头）<br>Connection</p><p>Connection 决定当前事务（一次三次握手和四次挥手）完成后，是否会关闭网络连接。Connection 有两种，一种是持久性连接，即一次事务完成后不关闭网络连接</p><p>Connection: keep-alive<br>1<br>另一种是非持久性连接，即一次事务完成后关闭网络连接</p><p>Connection: close<br>1<br>HTTP1.1 其他通用标头如下</p><p>实体标头<br>实体标头是描述消息正文内容的 HTTP 标头。实体标头用于 HTTP 请求和响应中。头部Content-Length、 Content-Language、 Content-Encoding 是实体头。</p><p>Content-Length 实体报头指示实体主体的大小，以字节为单位，发送到接收方。<br>Content-Language 实体报头描述了客户端或者服务端能够接受的语言，例如<br>Content-Language: de-DE<br>Content-Language: en-US<br>Content-Language: de-DE, en-CA<br>1<br>2<br>3<br>Content-Encoding 这又是一个比较麻烦的属性，这个实体报头用来压缩媒体类型。Content-Encoding 指示对实体应用了何种编码。</p><p>常见的内容编码有这几种： gzip、compress、deflate、identity ，这个属性可以应用在请求报文和响应报文中</p><p>Accept-Encoding: gzip, deflate &#x2F;&#x2F;请求头<br>Content-Encoding: gzip  &#x2F;&#x2F;响应头<br>1<br>2<br>下面是一些实体标头字段</p><p>请求标头<br>上面给出的例子请求报文的属性比较少，下面给出一个 MDN 官网的例子</p><p>GET &#x2F;home.html HTTP&#x2F;1.1<br>Host: developer.mozilla.org<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko&#x2F;20100101 Firefox&#x2F;50.0<br>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,<em>&#x2F;</em>;q&#x3D;0.8<br>Accept-Language: en-US,en;q&#x3D;0.5<br>Accept-Encoding: gzip, deflate, br<br>Referer: <a href="https://developer.mozilla.org/testpage.html">https://developer.mozilla.org/testpage.html</a><br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT<br>If-None-Match: “c561c68d0ba92bbeb8b0fff2a9199f722e3a621a”<br>Cache-Control: max-age&#x3D;0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>Host</p><p>Host 请求头指明了服务器的域名（对于虚拟主机来说），以及（可选的）服务器监听的TCP端口号。如果没有给定端口号，会自动使用被请求服务的默认端口（比如请求一个 HTTP 的 URL 会自动使用80作为端口）。</p><p>Host: developer.mozilla.org<br>1<br>上面的 Accpet、 Accept-Language、Accept-Encoding 都是属于内容协商的请求标头，我们会在下面说明</p><p>Referer</p><p>HTTP Referer 属性是请求标头的一部分，当浏览器向 web 服务器发送请求的时候，一般会带上 Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p><p>Referer: <a href="https://developer.mozilla.org/testpage.html">https://developer.mozilla.org/testpage.html</a><br>1<br>Upgrade-Insecure-Requests</p><p>Upgrade-Insecure-Requests 是一个请求标头，用来向服务器端发送信号，表示客户端优先选择加密及带有身份验证的响应。</p><p>Upgrade-Insecure-Requests: 1<br>1<br>If-Modified-Since</p><p>HTTP 的 If-Modified-Since 使其成为条件请求：</p><p>返回200，只有在给定日期的最后一次修改资源后，服务器才会以200状态发送回请求的资源。<br>如果请求从开始以来没有被修改过，响应会返回304并且没有任何响应体<br>If-Modified-Since 通常会与 If-None-Match 搭配使用，If-Modified-Since 用于确认代理或客户端拥有的本地资源的有效性。获取资源的更新日期时间，可通过确认首部字段 Last-Modified 来确定。</p><p>大白话说就是如果在 Last-Modified 之后更新了服务器资源，那么服务器会响应200，如果在 Last-Modified 之后没有更新过资源，则返回 304。</p><p>If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT<br>1<br>If-None-Match</p><p>If-None-Match HTTP请求标头使请求成为条件请求。 对于 GET 和 HEAD 方法，仅当服务器没有与给定资源匹配的 ETag 时，服务器才会以200状态发送回请求的资源。 对于其他方法，仅当最终现有资源的ETag与列出的任何值都不匹配时，才会处理请求。</p><p>If-None-Match: “c561c68d0ba92bbeb8b0fff2a9199f722e3a621a”<br>1<br>ETag 属于响应标头，后面进行介绍。</p><p>内容协商<br>内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的标准。</p><p>内容协商主要有以下3种类型：</p><p>服务器驱动协商（Server-driven Negotiation）<br>这种协商方式是由服务器端进行内容协商。服务器端会根据请求首部字段进行自动处理</p><p>客户端驱动协商（Agent-driven Negotiation）<br>这种协商方式是由客户端来进行内容协商。</p><p>透明协商（Transparent Negotiation）<br>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</p><p>内容协商的分类有很多种，主要的几种类型是 Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language。</p><p>Accept</p><p>接受请求 HTTP 标头会通告客户端其能够理解的 MIME 类型</p><p>那么什么是 MIME 类型呢？在回答这个问题前你应该先了解一下什么是 MIME</p><p>MIME: MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p><p>也就是说，MIME 类型其实就是一系列消息内容类型的集合。那么 MIME 类型都有哪些呢？</p><p>文本文件： text&#x2F;html、text&#x2F;plain、text&#x2F;css、application&#x2F;xhtml+xml、application&#x2F;xml</p><p>图片文件： image&#x2F;jpeg、image&#x2F;gif、image&#x2F;png</p><p>视频文件： video&#x2F;mpeg、video&#x2F;quicktime</p><p>应用程序二进制文件： application&#x2F;octet-stream、application&#x2F;zip</p><p>比如，如果浏览器不支持 PNG 图片的显示，那 Accept 就不指定image&#x2F;png，而指定可处理的 image&#x2F;gif 和 image&#x2F;jpeg 等图片类型。</p><p>一般 MIME 类型也会和 q 这个属性一起使用，q 是什么？q 表示的是权重，来看一个例子</p><p>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,<em>&#x2F;</em>;q&#x3D;0.8<br>1<br>这是什么意思呢？若想要给显示的媒体类型增加优先级，则使用 q&#x3D; 来额外表示权重值，没有显示权重的时候默认值是1.0 ，我给你列个表格你就明白了</p><p>qMIME<br>1.0text&#x2F;html<br>1.0application&#x2F;xhtml+xml<br>0.9application&#x2F;xml<br>0.8* &#x2F; *<br>也就是说，这是一个放置顺序，权重高的在前，低的在后，application&#x2F;xml;q&#x3D;0.9 是不可分割的整体。</p><p>Accept-Charset</p><p>accept-charset 属性规定服务器处理表单数据所接受的字符集。</p><p>accept-charset 属性允许您指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。</p><p>该属性的值是用引号包含字符集名称列表。如果可接受字符集与用户所使用的字符即不相匹配的话，浏览器可以选择忽略表单或是将该表单区别对待。</p><p>此属性的默认值是 unknown，表示表单的字符集与包含表单的文档的字符集相同。</p><p>常用的字符集有： UTF-8 - Unicode 字符编码 ； ISO-8859-1 - 拉丁字母表的字符编码</p><p>Accept-Language</p><p>首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集（指中文或英文等），以及自然语言集的相对优先级。可一次指定多种自然语言集。<br>和 Accept 首部字段一样，按权重值 q来表示相对优先级。</p><p>Accept-Language: en-US,en;q&#x3D;0.5<br>1<br>请求标头我们大概就介绍这几种，后面会有一篇文章详细深挖所有的响应头的，下面是一个响应头的汇总，基于 HTTP 1.1</p><p>响应标头<br>响应标头是可以在 HTTP 响应种使用的 HTTP 标头，这听起来是像一句废话，不过确实是这样解释。并不是所有出现在响应中的标头都是响应标头。还有一些特殊的我们上面说过，有通用标头和实体标头也会出现在响应标头中，比如 Content-Length 就是一个实体标头，但是，在这种情况下，这些实体请求通常称为响应头。下面以一个例子为例和你探讨一下响应头</p><p>200 OK<br>Access-Control-Allow-Origin: *<br>Connection: Keep-Alive<br>Content-Encoding: gzip<br>Content-Type: text&#x2F;html; charset&#x3D;utf-8<br>Date: Mon, 18 Jul 2016 16:06:00 GMT<br>Etag: “c561c68d0ba92bbeb8b0f612a9199f722e3a621a”<br>Keep-Alive: timeout&#x3D;5, max&#x3D;997<br>Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT<br>Server: Apache<br>Set-Cookie: mykey&#x3D;myvalue; expires&#x3D;Mon, 17-Jul-2017 16:06:00 GMT; Max-Age&#x3D;31449600; Path&#x3D;&#x2F;; secure<br>Transfer-Encoding: chunked<br>Vary: Cookie, Accept-Encoding<br>x-frame-options: DENY<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>响应状态码</p><p>首先出现的应该就是 200 OK，这是 HTTP 响应标头的状态码，它表示着响应成功完成。HTTP 响应标头的状态码有很多，并做了如下规定</p><p>以 2xx 为开头的都表示请求成功响应。</p><p>状态码含义<br>200成功响应<br>204请求处理成功，但是没有资源可以返回<br>206对资源某一部分进行响应，由Content-Range 指定范围的实体内容。<br>以 3xx 为开头的都表示需要进行附加操作以完成请求</p><p>状态码含义<br>301永久性重定向，该状态码表示请求的资源已经重新分配 URI，以后应该使用资源现有的 URI<br>302临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。<br>303该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。<br>304该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。<br>307临时重定向。该状态码与 302 Found 有着相同的含义。<br>以 4xx 的响应结果表明客户端是发生错误的原因所在。</p><p>状态码含义<br>400该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。<br>401该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。<br>403该状态码表明对请求资源的访问被服务器拒绝了。<br>404该状态码表明服务器上无法找到请求的资源。<br>以 5xx 为开头的响应标头都表示服务器本身发生错误</p><p>状态码含义<br>500该状态码表明服务器端在执行请求时发生了错误。<br>503该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。<br>Access-Control-Allow-Origin</p><p>一个返回的 HTTP 标头可能会具有 Access-Control-Allow-Origin ，Access-Control-Allow-Origin 指定一个来源，它告诉浏览器允许该来源进行资源访问。 否则-对于没有凭据的请求 *通配符，告诉浏览器允许任何源访问资源。例如，要允许源 <a href="https://mozilla.org/">https://mozilla.org</a> 的代码访问资源，可以指定：</p><p>Access-Control-Allow-Origin: <a href="https://mozilla.org/">https://mozilla.org</a><br>Vary: Origin<br>1<br>2<br>如果服务器指定单个来源而不是 *通配符的话 ，则服务器还应在 Vary 响应标头中包含 Origin ，以向客户端指示 服务器响应将根据原始请求标头的值而有所不同。</p><p>Keep-Alive</p><p>上面我们提到，HTTP 报文标头会分为四种，这其实是按着上下文来分类的</p><p>还有一种分类是根据代理进行分类，根据代理会分为端到端头 和 逐跳标头</p><p>而 Keep-Alive 表示的是 Connection 非持续连接的存活时间，如下</p><p>Connection: Keep-Alive<br>Keep-Alive: timeout&#x3D;5, max&#x3D;997<br>1<br>2<br>Keep-Alive 有两个参数，它们是以逗号分隔的参数列表，每个参数由一个标识符和一个由等号 &#x3D; 分隔的值组成。</p><p>timeout：指示空闲连接必须保持打开状态的最短时间（以秒为单位）。</p><p>max：指示在关闭连接之前可以在此连接上发送的最大请求数。</p><p>上述 HTTP 代码的意思就是限制最大的超时时间是 5s 和 最大的连接请求是 997 个。</p><p>Server</p><p>服务器标头包含有关原始服务器用来处理请求的软件的信息。</p><p>应该避免使用过于冗长和详细的 Server 值，因为它们可能会泄露内部实施细节，这可能会使攻击者容易地发现并利用已知的安全漏洞。例如下面这种写法</p><p>Server: Apache&#x2F;2.4.1 (Unix)<br>1<br>Set-Cookie</p><p>Cookie 又是另外一个领域的内容了，我们后面文章会说道 Cookie，这里需要记住 Cookie、Set-Cookie 和 Content-Disposition 等在其他 RFC 中定义的首部字段，它们不是属于 HTTP 1.1 的首部字段，但是使用率仍然很高。</p><p>Transfer-Encoding</p><p>首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。</p><p>Transfer-Encoding: chunked<br>1<br>HTTP &#x2F;1.1 的传输编码方式仅对分块传输编码有效。</p><p>X-Frame-Options</p><p>HTTP 首部字段是可以自行扩展的。所以在 Web 服务器和浏览器的应用上，会出现各种非标准的首部字段。</p><p>首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防止点击劫持（clickjacking）攻击。</p><p>下面是一个响应头的汇总，基于 HTTP 1.1</p><p>非 HTTP&#x2F;1.1 首部字段<br>在 HTTP 协议通信交互中使用到的首部字段，不限于 RFC2616 中定义的 47 种首部字段。还有 Cookie、Set-Cookie 和 Content-Disposition 等在其他 RFC 中定义的首部字段，它们的使用频率也很高。<br>这些非正式的首部字段统一归纳在 RFC4229 HTTP Header Field Registrations 中。</p><p>End-to-end 首部和 Hop-by-hop 首部<br>HTTP 首部字段将定义成缓存代理和非缓存代理的行为，分成 2 种类型。</p><p>一种是 End-to-end 首部 和 Hop-by-hop 首部</p><p>End-to-end（端到端） 首部<br>这些标头必须发送给消息的最终接收者 : 请求的服务器，或响应的客户端。中间代理必须重新传输未经修改的标头，并且缓存必须存储这些信息</p><p>Hop-by-hop（逐跳） 首部<br>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。</p><p>下面列举了 HTTP&#x2F;1.1 中的逐跳首部字段。除这 8 个首部字段之外，其他所有字段都属于端到端首部。</p><p>Connection、Keep-Alive、Proxy-Authenticate、Proxy-Authorization、Trailer、TE、Transfer-Encoding、Upgrade</p><p>HTTP 的优点和缺点<br>HTTP 的优点<br>简单灵活易扩展<br>HTTP 最重要也是最突出的优点是 简单、灵活、易于扩展。</p><p>HTTP 的协议比较简单，它的主要组成就是 header + body，头部信息也是简单的文本格式，而且 HTTP 的请求报文根据英文也能猜出来个大概的意思，降低学习门槛，能够让更多的人研究和开发 HTTP 应用。</p><p>所以，在简单的基础上，HTTP 协议又多了灵活 和 易扩展 的优点。</p><p>HTTP 协议里的请求方法、URI、状态码、原因短语、头字段等每一个核心组成要素都没有被制定死，允许开发者任意定制、扩充或解释，给予了浏览器和服务器最大程度的信任和自由。</p><p>应用广泛、环境成熟<br>因为过于简单，普及，因此应用很广泛。因为 HTTP 协议本身不属于一种语言，它并不限定某种编程语言或者操作系统，所以天然具有跨语言、跨平台的优越性。而且，因为本身的简单特性很容易实现，所以几乎所有的编程语言都有 HTTP 调用库和外围的开发测试工具。</p><p>随着移动互联网的发展， HTTP 的触角已经延伸到了世界的每一个角落，从简单的 Web 页面到复杂的 JSON、XML 数据，从台式机上的浏览器到手机上的各种 APP、新闻、论坛、购物、手机游戏，你很难找到一个没有使用 HTTP 的地方。</p><p>无状态<br>无状态其实既是优点又是缺点。因为服务器没有记忆能力，所以就不需要额外的资源来记录状态信息，不仅实现上会简单一些，而且还能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。</p><p>HTTP 的缺点<br>无状态<br>既然服务器没有记忆能力，它就无法支持需要连续多个步骤的事务操作。每次都得问一遍身份信息，不仅麻烦，而且还增加了不必要的数据传输量。由此出现了 Cookie 技术。</p><p>明文<br>HTTP 协议里还有一把优缺点一体的双刃剑，就是明文传输。明文意思就是协议里的报文（准确地说是 header 部分）不使用二进制数据，而是用简单可阅读的文本形式。</p><p>对比 TCP、UDP 这样的二进制协议，它的优点显而易见，不需要借助任何外部工具，用浏览器、Wireshark 或者 tcpdump 抓包后，直接用肉眼就可以很容易地查看或者修改，为我们的开发调试工作带来极大的便利。</p><p>当然缺点也是显而易见的，就是不安全，可以被监听和被窥探。因为无法判断通信双方的身份，不能判断报文是否被更改过。</p><p>性能<br>————————————————<br>版权声明：本文为CSDN博主「程序员cxuan」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_36894974/article/details/103930478">https://blog.csdn.net/qq_36894974/article/details/103930478</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo添加Button</title>
    <link href="/2022/07/08/Fluid-button-use/"/>
    <url>/2022/07/08/Fluid-button-use/</url>
    
    <content type="html"><![CDATA[<h1 id="1-hexo添加Button方法"><a href="#1-hexo添加Button方法" class="headerlink" title="1.hexo添加Button方法"></a>1.hexo添加Button方法</h1><p>你可以在 markdown 中加入如下的代码来使用 Button：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">&#123;% btn url, text, title %&#125; <br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>url：跳转链接<br>text：显示的文字<br>title：鼠标悬停时显示的文字（可选） </p><p class="note primary">tags</p>  长河落日袁先生  <p class="note success">success</p> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试基础面试题</title>
    <link href="/2022/07/08/mianshiya/"/>
    <url>/2022/07/08/mianshiya/</url>
    
    <content type="html"><![CDATA[<h1 id="1、软件测试流程"><a href="#1、软件测试流程" class="headerlink" title="1、软件测试流程"></a>1、软件测试流程</h1><ul><li>需求评审</li><li>测试计划编写</li><li>测试用例编写</li><li>测试用例评审</li><li>执行测试用例(搭建测试环境)</li><li>编写测试报告</li></ul><h1 id="2、缺陷定义"><a href="#2、缺陷定义" class="headerlink" title="2、缺陷定义"></a>2、缺陷定义</h1><ul><li>需求要求的功能没有实现</li><li>实现了需求没有要求的功能（画蛇添足）  </li><li>软件中出现了指明不应出现的错误  </li><li>需求虽未明确指明，但是应该实现的功能没有实现</li></ul><h1 id="3、黑盒测试用例设计方法"><a href="#3、黑盒测试用例设计方法" class="headerlink" title="3、黑盒测试用例设计方法"></a>3、黑盒测试用例设计方法</h1><ul><li>等价类划分法 <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">用户名长度为6<span class="hljs-string">-10</span>位<br>有效输入：6<span class="hljs-string">-10</span>    可以穷举<br>无效输入：&lt;6   可以穷举，&gt;10   穷举？？？？ <br></code></pre></td></tr></table></figure></li><li>边界值  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bnf">用户名长度为6-10位<br>有效边界值：6、7、8、9、10<br>无效边界值：<span class="hljs-attribute">&lt;6   和 &gt;</span>10<br></code></pre></td></tr></table></figure></li><li>场景分析法(ATM取款)  </li><li>正交表法  </li><li>状态迁移法<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">明确需求中有多少个状态  <br>比如订单状态：待发货、已发货、签收、申请取消、拒收等<br></code></pre></td></tr></table></figure></li><li>判定表  <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">某系统对修改密码有如下要求：首先输入原密码，原密码正确后才能输入新密码与确认密码，否则系统提示原密码错误。输入新密码与确认密码，检查通过后修改密码成功。新密码要求6<span class="hljs-string">-10</span>位，由字母+数字组成，如果不合法提示新密码不满足复杂度要求；如果确认密码与新密码不一致，提示确认密码必须与新密码一致。请使用判定表法编写测试用例。<br></code></pre></td></tr></table></figure></li></ul><h1 id="4、六大测试分类"><a href="#4、六大测试分类" class="headerlink" title="4、六大测试分类"></a>4、六大测试分类</h1><ul><li>功能性测试（Functionality）：关注功能是否正确。  </li><li>可用性测试（Usability）：关注产品是否好用。  </li><li>兼容性测试（Compatibility）：关注产品是否适用多种平台。  </li><li>可靠性测试（Reliability）：关注产品是否稳定可靠。  </li><li>安全性测试（Security）：关注产品是否存在漏洞。  </li><li>性能测试（Performance）：关注产品是否能够高效运行。</li></ul><h1 id="5、测试用例包含那些内容"><a href="#5、测试用例包含那些内容" class="headerlink" title="5、测试用例包含那些内容"></a>5、测试用例包含那些内容</h1><ul><li>测试用例编号  </li><li>测试用例标题  </li><li>前置条件    </li><li>测试用例操作步骤  </li><li>预期结果  </li><li>优先级</li></ul><h1 id="6、怎么保证测试覆盖率"><a href="#6、怎么保证测试覆盖率" class="headerlink" title="6、怎么保证测试覆盖率"></a>6、怎么保证测试覆盖率</h1><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gcode">测试用例覆盖率很难达到<span class="hljs-number">100</span><span class="hljs-meta">%</span>，越复杂的功能越难保证，只能说尽量提高测试覆盖率。<br>通过以下手段可以提高覆盖率：<br><span class="hljs-comment">(1)</span>编写测试用例前，检查相关需求、设计文档是否有问题（功能描述不清，设计逻辑缺陷），如有问题找相关设计或者产品问清楚。<br><span class="hljs-comment">(2)</span>功能列表包含新增和修改功能点，性能需求也要列出来（因为要整理对应的性能测试用例），同时还需要对既有功能进行一个梳理，检查是否会与其他功能有交互，整理出影响点。<br><span class="hljs-comment">(3)</span>把功能列表发给组员，并找时间进行会议评审，主要对功能等进行查漏补缺。<br><span class="hljs-comment">(4)</span>最后才行进测试用例编写，注意编写规范。<br><span class="hljs-comment">(5)</span>编写完毕后，把测试用例发给组员，开会进行评审，主要对检查点、用例规范进行查漏补缺。<br><span class="hljs-comment">(6)</span>执行测试用例过程中，发现用例不完善或者错误，需对测试用例进行及时的修改与调优<br><span class="hljs-comment">(7)</span>测试完毕后对漏测的bug进行测试用例补充。<br>```  <br><br><span class="hljs-attr"># 7</span>、软件测试方法  <br>- 按是否清楚程序的内部逻辑：白盒测试、灰盒测试、黑盒测试<br>- 按测试执行的方式：手工测试、自动化测试<br>- 按是否允许被测软件：静态测试、动态测试  <br><br><span class="hljs-attr"># 8</span>、开发对缺陷不认可如何处理  <br></code></pre></td></tr></table></figure><p>(1)检查提交的BUG描述是否清楚、是否复现<br>(2)查阅需求、设计文档看是否有对该问题有描述，如果没有查看类似软件是否存在该问题<br>(3)如果还是不能将情况汇报给领导，并说明BUG的情况以及自己认为是BUG的理由</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 9、BUG不可复现怎么办  </span><br>先在出现该问题上的环境上尽量重现，保持浏览器、账号、操作步骤环境一致。如果还是不能重现，把<span class="hljs-keyword">bug记录到BUG管理平台，详细记录BUG的操作步骤、特征、环境账号、操作截图、出现错误截图和日志截图等，并注明是偶现。如果BUG优先级比较高，项目时间允许，让开发协助重现。如果项目时间不允许，记录到BUG管理平台后续跟进。</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># 10、如何判断BUG是前端还是后端问题</span><br></code></pre></td></tr></table></figure><p>(1)界面：文字错误、排版混乱、兼容问题前端问题<br>(2)通过抓包对接口返回信息进行分析，分析出缺陷一般为后端问题<br>(3)后端查看日志</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 11、接口测试流程</span><br><span class="hljs-bullet">-</span> 获取接口文档、分析接口<br><span class="hljs-bullet">-</span> 编写接口测试用例<br><span class="hljs-bullet">-</span> 测试用例评审<br><span class="hljs-bullet">-</span> 执行测试用例(添加线程组、添加HTTP请求，根据接口文档填写相关请求参数、参数值，断言、添加查看结果树，看接口返回信息以预期信息是否一致)<br><span class="hljs-bullet">-</span> 提交、跟踪缺陷和回归测试<br><span class="hljs-bullet">-</span> 编写测试报告<br><br><span class="hljs-section"># 12、测试报告内容</span><br><span class="hljs-bullet">-</span> 测试范围  <br><span class="hljs-bullet">-</span> 测试时间<br><span class="hljs-bullet">-</span> 测试人员<br><span class="hljs-bullet">-</span> 测试策略<br><span class="hljs-bullet">-</span> 缺陷统计与分析<br><span class="hljs-bullet">-</span> 上线风险<br><span class="hljs-bullet">-</span> 遗留问题<br><span class="hljs-bullet">-</span> 测试是否通过<br><br><span class="hljs-section"># 13、职业规划  </span><br></code></pre></td></tr></table></figure><ul><li>短期学习公司的业务，然后上手自己的工作，做好自己的本职工作，适应公司节奏</li><li>长期来看，我会根据公司的发展需要继续提升自己的某项专业能力，把学习到的测试技能更好的应用到工作中去<figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># 14、说出自己的缺点  </span><br><br>虽然已经有两年的工作经历，但是还是认为自己的经验还不是很丰富，后期呢我也会多多加深自己的测试技术。<br><br><br><span class="hljs-comment"># 15、做测试自己最大的优势  </span><br>(1)站在客户的角度思考问题，好的技术人员除了技术过硬外，还要懂得从用户的角度出发，要了解用户，所以我在工作中，揣摩用户的使用习惯，表达自己对产品的使用感受，在测试过程中除了提交BUG，也会偶尔反馈一些优化建议。  <br><br>(2)比较有责任心。领导交付给我一个任务。每天下班之前反馈进度，保证项目进度。遇到问题主动去协调不同部门的同事解决问题。<br><br><br><span class="hljs-comment"># 16、UI自动化元素过程中定位不到的原因  </span><br><span class="hljs-literal">-</span> 元素表达式编写错误  <br><span class="hljs-literal">-</span> 元素未完全加载出来 <br><span class="hljs-literal">-</span> 元素嵌套在iframe中  <br><span class="hljs-literal">-</span> 元素在新窗口中<br><span class="hljs-literal">-</span> 脚本流程与实际流程不符合<br><span class="hljs-literal">-</span> 元素不在当前页  <br><br><span class="hljs-comment"># 17、UI自动化八种定位方式  </span><br><span class="hljs-literal">-</span> id<br><span class="hljs-literal">-</span> name<br><span class="hljs-literal">-</span> class_name、<br><span class="hljs-literal">-</span> tag_name(标签名称)、<br><span class="hljs-literal">-</span> link_text(定位a标签)、<br><span class="hljs-literal">-</span> partial_link_text(定位a标签模糊)、<br><span class="hljs-literal">-</span> Xpath(基于路径定位)<br><span class="hljs-literal">-</span> css(元素选择器)<br><br><span class="hljs-comment"># 18、UI自动化三种等待方式</span><br><span class="hljs-literal">-</span> 强制等待<br>如sleep(5)，一定会等待5秒才会继续执行下面的代码<br><br><span class="hljs-literal">-</span> 显示等待<br>只针对当前元素，在指定条件内不断查找元素，直到找到元素或者超时报错<br><br><span class="hljs-literal">-</span> 隐式等待  <br>在指定的时间范围内查找元素，直到找到元素或者超时(报错 no suchelement)，特点是全局的  <br><br><span class="hljs-comment"># 19、UI自动化测试框架组成结构</span><br><span class="hljs-literal">-</span> 测试用例/测试数据<br><span class="hljs-literal">-</span> 基础方法（包含PO分层，数据驱动）<br><span class="hljs-literal">-</span> 工具包<br><span class="hljs-literal">-</span> 测试报告<br><span class="hljs-literal">-</span> 测试日志<br><br><span class="hljs-comment"># 20、PO模式  </span><br>减少代码重复，增加代码可读性，更容易维护。包含对象层、操作层、业务层。<br><span class="hljs-literal">-</span> 封装driver<br><span class="hljs-literal">-</span> 封装页面元素定位方法  <br><span class="hljs-literal">-</span> 封装页面元素操作，如输入用户名、密码等<br><span class="hljs-literal">-</span> 根据封装页面元素操作方法组合成业务<br><br><span class="hljs-comment"># 21、linux常用命令 </span><br></code></pre></td></tr></table></figure>tail -f #查看日志文件<br>cd #切换目录<br>ls #查看当前目录文件<br>df #查看磁盘使用情况<br>top #查看服务器资源使用情况<br>ps  #查看进程使用情况<br>netstat #查看端口占用情况<br>find #查找<br>cp #复制<br>tar #解压缩<br>mv #重命名<br>kill #<br>gerp #查找文档<br>vi #功能强大的纯文本编辑器<br>unzip #解压缩<br>mkdir #创建文件<br>touch #创建新的空文件<br>tail -n 100 filename #查看文件100行<br>head -n 200filename |tail -n 100  #查看文件100行到200行<br>chmod #用来变更文件或目录的权限<br>cat  #显示文件内容<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 22、印象最深的BUG</span><br>(1)登录页面，输入密码后，点击密码明文显示后，点击登录提示密码错误。前端页面发现密码并没有错误。后通过抓包将密码MD5解密后发现密码少了一位。最后得出输入密码后点击密码明文显示后密码会自动减少一位<br><br>(2)最近测试的商城项目，员工为销售的订单管理页面，查看订单详情，将URL中的订单更改为其他销售下的订单号，然后可以成功查看其他销售下的订单详情。  <br><br><span class="hljs-comment"># 23、问面试官的问题  </span><br><span class="hljs-bullet">-</span> <span class="hljs-string">薪资组成结构</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">试用期缴纳社保吗</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">12薪还是13薪等</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">工作内容是啥</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">入职是否有培训？公司是否提供专业学习机会</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">请问您在贵公司工作多久了</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">考核方式</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">问团队气氛，了解你的公司</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">比如:咱们团队多少人？工作年限大概是多久呀？</span><br>![question](https://itcttme96-bucket.oss-cn-shenzhen.aliyuncs.com/img/question_20220523002610.jpg)<br>问题：面试的最后，面试官会说你有什么要问我的吗？那么我们需要注意哪些？<br>答：<br>1）不要问跟工作无关的问题。<br>2）问工作内容，明确你的职能。<br>比如：如果得到这份工作，以后谁来带我呢？<br>如果成为贵公司的一员，你们希望我短期内解决什么问题呢？<br>未来一年，我们部门的工作目标是什么？<br>岗位的主要职责我已经明白了，公司对我还有什么其他的要求吗？<br>3)问工作潜力，打听你的未来<br>比如:入职后的几个月，我会参加哪些培训呢？<br>这个岗位在咱们公司的晋升路径是什么样的？<br>您对我这个岗位三到五年的职责规划有什么建议吗？<br>4)问团队气氛，了解你的公司<br>比如:咱们团队多少人？工作年限大概是多久呀？<br>您觉得最能代表咱们公司的员工是怎样的呢？<br>能带我参观一下咱们的办公区域吗？<br>5)问工作体验，拉近跟面试官的距离<br>您在这里工作多久了？<br>您最喜欢这家公司的什么地方？最不喜欢什么地方？<br>能给我大概讲讲公司的企业文化吗？<br>能给我举一个公司团队合作的例子吗？<br>如果再给您一次机会，您还会选择这家公司吗？<br><br><br><span class="hljs-comment">## 24、产品上线标准 </span><br><span class="hljs-bullet">-</span> <span class="hljs-string">测试用例是否全部百分之百执行完毕，如果还有未执行完毕的用例，是什么原因没有全部执行完，例如时间的原因，或者是优先级比较低的一个应用性测试用例</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">剩余的bug数量和严重程度的这个等级要达到一定的标准，比如说不存在致命性、严重程度的这样一个bug，建议或不影响使用的遗留问题需要经过产品经理和测试经理协同制定这个可用的一个数量</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">上线前的最后回归测试是否完成</span><br><br><span class="hljs-comment">## 25、遇到frame框架页面怎么处理</span><br>问:遇到frame框架页面怎么处理?  <br><span class="hljs-attribute">答</span><span class="hljs-punctuation">:  </span><br>1.先定位到frame;  <br>2.再用driver.switch_to.frame()跳转进frame进行操作;  <br>3.操作完后使用  <br>driver.swith_to.default_content()跳转出来frame  <br><br><span class="hljs-comment">## 26、UI自动化测试用例怎么设计 </span><br>![UI自动化测试用例怎么设计](https://itcttme96-bucket.oss-cn-shenzhen.aliyuncs.com/img/UI01202205191303315.jpg)<br><br><span class="hljs-comment">## 27、如何去提升UI自动化测试用例的稳定性?</span><br><span class="hljs-attribute">答</span><span class="hljs-punctuation">:  </span><br>1.使用xpath表达式定位元素时，使用相对路径;  <br>2.定位元素时尽量使用显式等待，等要操作的元素出现之后再执行下面的操作;  <br>3.多用try捕获异常、处理异常;    <br>4.降低用例间的耦合;  <br>5.尽量使用单独的测试环境，避免其他类型的测试同步进行，对数据造成干扰;  <br>6.脚本执行失败后加入重试机制;  <br>7.用例执行结束后对测试场景进行还原，避免影响其他测试用例的执行  <br><br><span class="hljs-comment"># 28、元素定位到了，却点击无效(也没报错），如何解决?</span><br>答:可以使用js进行点击操作例如:  <br></code></pre></td></tr></table></figure>js &#x3D; ‘document.getElementByld(“baidu”).click()’<br>driver.execute_script(js)</li></ul><pre><code class="hljs"># 29、微信视频聊天测试点[传送门](https://blog.csdn.net/weixin_44369212/article/details/109481014)![](https://img-blog.csdnimg.cn/20201103223433596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM2OTIxMg==,size_16,color_FFFFFF,t_70)</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
