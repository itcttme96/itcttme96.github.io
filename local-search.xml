<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/10/hello-world/"/>
    <url>/2022/07/10/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>看完这篇HTTP，跟面试官扯皮就没问题了</title>
    <link href="/2022/07/09/http/"/>
    <url>/2022/07/09/http/</url>
    
    <content type="html"><![CDATA[<!--more--><p class="note danger">认识HTTP</p>首先你听的最多的应该就是 HTTP 是一种 超文本传输协议(Hypertext Transfer Protocol)，这你一定能说出来，但是这样还不够，假如你是大厂面试官，这不可能是他想要的最终结果，我们在面试的时候往往把自己知道的尽可能多的说出来，才有和面试官谈价钱的资本。那么什么是超文本传输协议？<p>超文本传输协议可以进行文字分割：超文本（Hypertext）、传输（Transfer）、协议（Protocol），它们之间的关系如下</p><div class="note note-success">            <p>这是一个tag! </p>          </div>  <p>按照范围的大小 协议 &gt; 传输 &gt; 超文本。下面就分别对这三个名次做一个解释。<br>什么是超文本<br>在互联网早期的时候，我们输入的信息只能保存在本地，无法和其他电脑进行交互。我们保存的信息通常都以文本即简单字符的形式存在，文本是一种能够被计算机解析的有意义的二进制数据包。而随着互联网的高速发展，两台电脑之间能够进行数据的传输后，人们不满足只能在两台电脑之间传输文字，还想要传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，那么文本的语义就被扩大了，这种语义扩大后的文本就被称为超文本(Hypertext)。</p><p>什么是传输<br>那么我们上面说到，两台计算机之间会形成互联关系进行通信，我们存储的超文本会被解析成为二进制数据包，由传输载体（例如同轴电缆，电话线，光缆）负责把二进制数据包由计算机终端传输到另一个终端的过程（对终端的详细解释可以参考 你说你懂互联网，那这些你知道么？这篇文章）称为传输(transfer)。</p><p>通常我们把传输数据包的一方称为请求方，把接到二进制数据包的一方称为应答方。请求方和应答方可以进行互换，请求方也可以作为应答方接受数据，应答方也可以作为请求方请求数据，它们之间的关系如下</p><p>如图所示，A 和 B 是两个不同的端系统，它们之间可以作为信息交换的载体存在，刚开始的时候是 A 作为请求方请求与 B 交换信息，B 作为响应的一方提供信息；随着时间的推移，B 也可以作为请求方请求 A 交换信息，那么 A 也可以作为响应方响应 B 请求的信息。</p><p>什么是协议<br>协议这个名词不仅局限于互联网范畴，也体现在日常生活中，比如情侣双方约定好在哪个地点吃饭，这个约定也是一种协议，比如你应聘成功了，企业会和你签订劳动合同，这种双方的雇佣关系也是一种 协议。注意自己一个人对自己的约定不能成为协议，协议的前提条件必须是多人约定。</p><p>那么网络协议是什么呢？</p><p>网络协议就是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。</p><p>没有网络协议的互联网是混乱的，就和人类社会一样，人不能想怎么样就怎么样，你的行为约束是受到法律的约束的；那么互联网中的端系统也不能自己想发什么发什么，也是需要受到通信协议约束的。</p><p>那么我们就可以总结一下，什么是 HTTP？可以用下面这个经典的总结回答一下： HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</p><p>与 HTTP 有关的组件<br>随着网络世界演进，HTTP 协议已经几乎成为不可替代的一种协议，在了解了 HTTP 的基本组成后，下面再来带你进一步认识一下 HTTP 协议。</p><p>网络模型<br>网络是一个复杂的系统，不仅包括大量的应用程序、端系统、通信链路、分组交换机等，还有各种各样的协议组成，那么现在我们就来聊一下网络中的协议层次。</p><p>为了给网络协议的设计提供一个结构，网络设计者以分层(layer)的方式组织协议，每个协议属于层次模型之一。每一层都是向它的上一层提供服务(service)，即所谓的服务模型(service model)。每个分层中所有的协议称为 协议栈(protocol stack)。因特网的协议栈由五个部分组成：物理层、链路层、网络层、运输层和应用层。我们采用自上而下的方法研究其原理，也就是应用层 -&gt; 物理层的方式。</p><p>应用层<br>应用层是网络应用程序和网络协议存放的分层，因特网的应用层包括许多协议，例如我们学 web 离不开的 HTTP，电子邮件传送协议 SMTP、端系统文件上传协议 FTP、还有为我们进行域名解析的 DNS 协议。应用层协议分布在多个端系统上，一个端系统应用程序与另外一个端系统应用程序交换信息分组，我们把位于应用层的信息分组称为 报文(message)。</p><p>运输层<br>因特网的运输层在应用程序断点之间传送应用程序报文，在这一层主要有两种传输协议 TCP和 UDP，利用这两者中的任何一个都能够传输报文，不过这两种协议有巨大的不同。</p><p>TCP 向它的应用程序提供了面向连接的服务，它能够控制并确认报文是否到达，并提供了拥塞机制来控制网络传输，因此当网络拥塞时，会抑制其传输速率。</p><p>UDP 协议向它的应用程序提供了无连接服务。它不具备可靠性的特征，没有流量控制，也没有拥塞控制。我们把运输层的分组称为 报文段(segment)</p><p>网络层<br>因特网的网络层负责将称为 数据报(datagram) 的网络分层从一台主机移动到另一台主机。网络层一个非常重要的协议是 IP 协议，所有具有网络层的因特网组件都必须运行 IP 协议，IP 协议是一种网际协议，除了 IP 协议外，网络层还包括一些其他网际协议和路由选择协议，一般把网络层就称为 IP 层，由此可知 IP 协议的重要性。</p><p>链路层<br>现在我们有应用程序通信的协议，有了给应用程序提供运输的协议，还有了用于约定发送位置的 IP 协议，那么如何才能真正的发送数据呢？为了将分组从一个节点（主机或路由器）运输到另一个节点，网络层必须依靠链路层提供服务。链路层的例子包括以太网、WiFi 和电缆接入的 DOCSIS 协议，因为数据从源目的地传送通常需要经过几条链路，一个数据包可能被沿途不同的链路层协议处理，我们把链路层的分组称为 帧(frame)</p><p>物理层<br>虽然链路层的作用是将帧从一个端系统运输到另一个端系统，而物理层的作用是将帧中的一个个 比特 从一个节点运输到另一个节点，物理层的协议仍然使用链路层协议，这些协议与实际的物理传输介质有关，例如，以太网有很多物理层协议：关于双绞铜线、关于同轴电缆、关于光纤等等。</p><p>五层网络协议的示意图如下</p><p>OSI 模型<br>我们上面讨论的计算网络协议模型不是唯一的 协议栈，ISO（国际标准化组织）提出来计算机网络应该按照7层来组织，那么7层网络协议栈与5层的区别在哪里？</p><p>从图中可以一眼看出，OSI 要比上面的网络模型多了 表示层 和 会话层，其他层基本一致。表示层主要包括数据压缩和数据加密以及数据描述，数据描述使得应用程序不必担心计算机内部存储格式的问题，而会话层提供了数据交换的定界和同步功能，包括建立检查点和恢复方案。</p><p>浏览器<br>就如同各大邮箱使用电子邮件传送协议 SMTP 一样，浏览器是使用 HTTP 协议的主要载体，说到浏览器，你能想起来几种？是的，随着网景大战结束后，浏览器迅速发展，至今已经出现过的浏览器主要有</p><p>浏览器正式的名字叫做 Web Broser，顾名思义，就是检索、查看互联网上网页资源的应用程序，名字里的 Web，实际上指的就是 World Wide Web，也就是万维网。</p><p>我们在地址栏输入URL（即网址），浏览器会向DNS（域名服务器，后面会说）提供网址，由它来完成 URL 到 IP 地址的映射。然后将请求你的请求提交给具体的服务器，在由服务器返回我们要的结果（以HTML编码格式返回给浏览器），浏览器执行HTML编码，将结果显示在浏览器的正文。这就是一个浏览器发起请求和接受响应的过程。</p><p>Web 服务器<br>Web 服务器的正式名称叫做 Web Server，Web 服务器一般指的是网站服务器，上面说到浏览器是 HTTP 请求的发起方，那么 Web 服务器就是 HTTP 请求的应答方，Web 服务器可以向浏览器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache、 Nginx 、IIS。</p><p>CDN<br>CDN的全称是Content Delivery Network，即内容分发网络，它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。CDN 是构建在现有网络基础之上的网络，它依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>打比方说你要去亚马逊上买书，之前你只能通过购物网站购买后从美国发货过海关等重重关卡送到你的家里，现在在中国建立一个亚马逊分基地，你就不用通过美国进行邮寄，从中国就能把书尽快给你送到。</p><p>WAF<br>WAF 是一种 Web 应用程序防护系统（Web Application Firewall，简称 WAF），它是一种通过执行一系列针对HTTP &#x2F; HTTPS的安全策略来专门为Web应用提供保护的一款产品，它是应用层面的防火墙，专门检测 HTTP 流量，是防护 Web 应用的安全技术。</p><p>WAF 通常位于 Web 服务器之前，可以阻止如 SQL 注入、跨站脚本等攻击，目前应用较多的一个开源项目是 ModSecurity，它能够完全集成进 Apache 或 Nginx。</p><p>WebService<br>WebService 是一种 Web 应用程序，WebService是一种跨编程语言和跨操作系统平台的远程调用技术。</p><p>Web Service 是一种由 W3C 定义的应用服务开发规范，使用 client-server 主从架构，通常使用 WSDL 定义服务接口，使用 HTTP 协议传输 XML 或 SOAP 消息，它是一个基于 Web（HTTP）的服务架构技术，既可以运行在内网，也可以在适当保护后运行在外网。</p><p>HTML<br>HTML 称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的 Internet 资源连接为一个逻辑整体。HTML 文本是由 HTML 命令组成的描述性文本，HTML 命令可以说明文字，图形、动画、声音、表格、链接等。</p><p>Web 页面构成<br>Web 页面（Web page）也叫做文档，是由一个个对象组成的。一个对象(Objecy) 只是一个文件，比如一个 HTML 文件、一个 JPEG 图形、一个 Java 小程序或一个视频片段，它们在网络中可以通过 URL 地址寻址。多数的 Web 页面含有一个 HTML 基本文件 以及几个引用对象。</p><p>举个例子，如果一个 Web 页面包含 HTML 文件和5个 JPEG 图形，那么这个 Web 页面就有6个对象：一个 HTML 文件和5个 JPEG 图形。HTML 基本文件通过 URL 地址引用页面中的其他对象。</p><p>与 HTTP 有关的协议<br>在互联网中，任何协议都不会单独的完成信息交换，HTTP 也一样。虽然 HTTP 属于应用层的协议，但是它仍然需要其他层次协议的配合完成信息的交换，那么在完成一次 HTTP 请求和响应的过程中，需要哪些协议的配合呢？一起来看一下</p><p>TCP&#x2F;IP<br>TCP&#x2F;IP 协议你一定听过，TCP&#x2F;IP 我们一般称之为协议簇，什么意思呢？就是 TCP&#x2F;IP 协议簇中不仅仅只有 TCP 协议和 IP 协议，它是一系列网络通信协议的统称。而其中最核心的两个协议就是 TCP &#x2F; IP 协议，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。</p><p>TCP 协议的全称是 Transmission Control Protocol 的缩写，意思是传输控制协议，HTTP 使用 TCP 作为通信协议，这是因为 TCP 是一种可靠的协议，而可靠能保证数据不丢失。</p><p>IP 协议的全称是 Internet Protocol 的缩写，它主要解决的是通信双方寻址的问题。IP 协议使用 IP 地址 来标识互联网上的每一台计算机，可以把 IP 地址想象成为你手机的电话号码，你要与他人通话必须先要知道他人的手机号码，计算机网络中信息交换必须先要知道对方的 IP 地址。（关于 TCP 和 IP 更多的讨论我们会在后面详解）</p><p>DNS<br>你有没有想过为什么你可以通过键入 <a href="http://www.google.com/">www.google.com</a> 就能够获取你想要的网站？我们上面说到，计算机网络中的每个端系统都有一个 IP 地址存在，而把 IP 地址转换为便于人类记忆的协议就是 DNS 协议。</p><p>DNS 的全称是域名系统（Domain Name System，缩写：DNS），它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p><p>URI &#x2F; URL<br>我们上面提到，你可以通过输入 <a href="http://www.google.com/">www.google.com</a> 地址来访问谷歌的官网，那么这个地址有什么规定吗？我怎么输都可以？AAA.BBB.CCC 是不是也行？当然不是的，你输入的地址格式必须要满足 URI 的规范。</p><p>URI的全称是（Uniform Resource Identifier），中文名称是统一资源标识符，使用它就能够唯一地标记互联网上资源。</p><p>URL的全称是（Uniform Resource Locator），中文名称是统一资源定位符，也就是我们俗称的网址，它实际上是 URI 的一个子集。</p><p>URI 不仅包括 URL，还包括 URN（统一资源名称），它们之间的关系如下</p><p>HTTPS<br>HTTP 一般是明文传输，很容易被攻击者窃取重要信息，鉴于此，HTTPS 应运而生。HTTPS 的全称为 （Hyper Text Transfer Protocol over SecureSocket Layer），全称有点长，HTTPS 和 HTTP 有很大的不同在于 HTTPS 是以安全为目标的 HTTP 通道，在 HTTP 的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在 HTTP 的基础上增加了 SSL 层，也就是说 HTTPS &#x3D; HTTP + SSL。（这块我们后面也会详谈 HTTPS）</p><p>HTTP 请求响应过程<br>你是不是很好奇，当你在浏览器中输入网址后，到底发生了什么事情？你想要的内容是如何展现出来的？让我们通过一个例子来探讨一下，我们假设访问的 URL 地址为 <a href="http://www.someschool.edu/someDepartment/home.index%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%B9%B6%E7%82%B9%E5%87%BB%E5%9B%9E%E8%BD%A6%E6%97%B6%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E9%83%A8%E4%BC%9A%E8%BF%9B%E8%A1%8C%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C">http://www.someSchool.edu/someDepartment/home.index，当我们输入网址并点击回车时，浏览器内部会进行如下操作</a></p><p>DNS服务器会首先进行域名的映射，找到访问<a href="http://www.someschool.edu所在的地址,然后http/">www.someSchool.edu所在的地址，然后HTTP</a> 客户端进程在 80 端口发起一个到服务器 <a href="http://www.someschool.edu/">www.someSchool.edu</a> 的 TCP 连接（80 端口是 HTTP 的默认端口）。在客户和服务器进程中都会有一个套接字与其相连。<br>HTTP 客户端通过它的套接字向服务器发送一个 HTTP 请求报文。该报文中包含了路径 someDepartment&#x2F;home.index 的资源，我们后面会详细讨论 HTTP 请求报文。<br>HTTP 服务器通过它的套接字接受该报文，进行请求的解析工作，并从其存储器(RAM 或磁盘)中检索出对象 <a href="http://www.someschool.edu/someDepartment/home.index%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8A%8A%E6%A3%80%E7%B4%A2%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85%EF%BC%8C%E5%B0%81%E8%A3%85%E5%88%B0">www.someSchool.edu/someDepartment/home.index，然后把检索出来的对象进行封装，封装到</a> HTTP 响应报文中，并通过套接字向客户进行发送。<br>HTTP 服务器随即通知 TCP 断开 TCP 连接，实际上是需要等到客户接受完响应报文后才会断开 TCP 连接。<br>HTTP 客户端接受完响应报文后，TCP 连接会关闭。HTTP 客户端从响应中提取出报文中是一个 HTML 响应文件，并检查该 HTML 文件，然后循环检查报文中其他内部对象。<br>检查完成后，HTTP 客户端会把对应的资源通过显示器呈现给用户。<br>至此，键入网址再按下回车的全过程就结束了。上述过程描述的是一种简单的请求-响应全过程，真实的请求-响应情况可能要比上面描述的过程复杂很多。</p><p>HTTP 请求特征<br>从上面整个过程中我们可以总结出 HTTP 进行分组传输是具有以下特征</p><p>支持客户-服务器模式<br>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。<br>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。<br>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>无状态：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>详解 HTTP 报文<br>我们上面描述了一下 HTTP 的请求响应过程，流程比较简单，但是凡事就怕认真，你这一认真，就能拓展出很多东西，比如 HTTP 报文是什么样的，它的组成格式是什么？ 下面就来探讨一下</p><p>HTTP 协议主要由三大部分组成：</p><p>起始行（start line）：描述请求或响应的基本信息；<br>头部字段（header）：使用 key-value 形式更详细地说明报文；<br>消息正文（entity）：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。<br>其中起始行和头部字段并成为 请求头 或者 响应头，统称为 Header；消息正文也叫做实体，称为 body。HTTP 协议规定每次发送的报文必须要有 Header，但是可以没有 body，也就是说头信息是必须的，实体信息可以没有。而且在 header 和 body 之间必须要有一个空行（CRLF），如果用一幅图来表示一下的话，我觉得应该是下面这样</p><p>我们使用上面的那个例子来看一下 http 的请求报文</p><p>如图，这是 <a href="http://www.someschool.edu/someDepartment/home.index">http://www.someSchool.edu/someDepartment/home.index</a> 请求的请求头，通过观察这个 HTTP 报文我们就能够学到很多东西，首先，我们看到报文是用普通 ASCII 文本书写的，这样保证人能够可以看懂。然后，我们可以看到每一行和下一行之间都会有换行，而且最后一行（请求头部后）再加上一个回车换行符。</p><p>每个报文的起始行都是由三个字段组成：方法、URL 字段和 HTTP 版本字段。</p><p>HTTP 请求方法<br>HTTP 请求方法一般分为 8 种，它们分别是</p><p>GET 获取资源，GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；</p><p>POST 传输实体，虽然 GET 方法也可以传输主体信息，但是便于区分，我们一般不用 GET 传输实体信息，反而使用 POST 传输实体信息，</p><p>PUT 传输文件，PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。</p><p>但是，鉴于 HTTP 的 PUT 方法自身不带验证机制，任何人都可以上传文件 , 存在安全性问题，因此一般的 W eb 网站不使用该方法。若配合 W eb 应用程序的验证机制，或架构设计采用REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。</p><p>HEAD 获得响应首部，HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p><p>DELETE 删除文件，DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。</p><p>OPTIONS 询问支持的方法，OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。</p><p>TRACE 追踪路径，TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。</p><p>CONNECT 要求用隧道协议连接代理，CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加 密后经网络隧道传输。</p><p>我们一般最常用的方法也就是 GET 方法和 POST 方法，其他方法暂时了解即可。下面是 HTTP1.0 和 HTTP1.1 支持的方法清单</p><p>HTTP 请求 URL<br>HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。URL 带有请求对象的标识符。在上面的例子中，浏览器正在请求对象 &#x2F;somedir&#x2F;page.html 的资源。</p><p>我们再通过一个完整的域名解析一下 URL</p><p>比如 <a href="http://www.example.com/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument">http://www.example.com:80/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument</a> 这个 URL 比较繁琐了吧，你把这个 URL 搞懂了其他的 URL 也就不成问题了。</p><p>首先出场的是 http</p><p>http:&#x2F;&#x2F;告诉浏览器使用何种协议。对于大部分 Web 资源，通常使用 HTTP 协议或其安全版本，HTTPS 协议。另外，浏览器也知道如何处理其他协议。例如， mailto: 协议指示浏览器打开邮件客户端；ftp:协议指示浏览器处理文件传输。</p><p>第二个出场的是 主机</p><p><a href="http://www.example.com/">www.example.com</a> 既是一个域名，也代表管理该域名的机构。它指示了需要向网络上的哪一台主机发起请求。当然，也可以直接向主机的 IP address 地址发起请求。但直接使用 IP 地址的场景并不常见。</p><p>第三个出场的是 端口</p><p>我们前面说到，两个主机之间要发起 TCP 连接需要两个条件，主机 + 端口。它表示用于访问 Web 服务器上资源的入口。如果访问的该 Web 服务器使用HTTP协议的标准端口（HTTP为80，HTTPS为443）授予对其资源的访问权限，则通常省略此部分。否则端口就是 URI 必须的部分。</p><p>上面是请求 URL 所必须包含的部分，下面就是 URL 具体请求资源路径</p><p>第四个出场的是 路径</p><p>&#x2F;path&#x2F;to&#x2F;myfile.html 是 Web 服务器上资源的路径。以端口后面的第一个 &#x2F; 开始，到 ? 号之前结束，中间的 每一个&#x2F; 都代表了层级（上下级）关系。这个 URL 的请求资源是一个 html 页面。</p><p>紧跟着路径后面的是 查询参数</p><p>?key1&#x3D;value1&amp;key2&#x3D;value2 是提供给 Web 服务器的额外参数。如果是 GET 请求，一般带有请求 URL 参数，如果是 POST 请求，则不会在路径后面直接加参数。这些参数是用 &amp; 符号分隔的键&#x2F;值对列表。key1 &#x3D; value1 是第一对，key2 &#x3D; value2 是第二对参数</p><p>紧跟着参数的是锚点</p><p>#SomewhereInTheDocument 是资源本身的某一部分的一个锚点。锚点代表资源内的一种“书签”，它给予浏览器显示位于该“加书签”点的内容的指示。 例如，在HTML文档上，浏览器将滚动到定义锚点的那个点上；在视频或音频文档上，浏览器将转到锚点代表的那个时间。值得注意的是 # 号后面的部分，也称为片段标识符，永远不会与请求一起发送到服务器。</p><p>HTTP 版本<br>表示报文使用的 HTTP 协议版本。</p><p>请求头部<br>这部分内容只是大致介绍一下，内容较多，后面会再以一篇文章详述</p><p>在表述完了起始行之后我们再来看一下请求头部，现在我们向上找，找到<a href="http://www.someschool.edu/someDepartment/home.index%EF%BC%8C%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%AE%83%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8">http://www.someSchool.edu/someDepartment/home.index，来看一下它的请求头部</a></p><p>Host: <a href="http://www.someschool.edu/">www.someschool.edu</a><br>Connection: close<br>User-agent: Mozilla&#x2F;5.0<br>Accept-language: fr<br>1<br>2<br>3<br>4<br>这个请求头信息比较少，首先 Host 表示的是对象所在的主机。你也许认为这个 Host 是不需要的，因为 URL 不是已经指明了请求对象的路径了吗？这个首部行提供的信息是 Web 代理高速缓存所需要的。Connection: close 表示的是浏览器需要告诉服务器使用的是非持久连接。它要求服务器在发送完响应的对象后就关闭连接。User-agent: 这是请求头用来告诉 Web 服务器，浏览器使用的类型是 Mozilla&#x2F;5.0，即 Firefox 浏览器。Accept-language 告诉 Web 服务器，浏览器想要得到对象的法语版本，前提是服务器需要支持法语类型，否则将会发送服务器的默认版本。下面我们针对主要的实体字段进行介绍（具体的可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a> MDN 官网学习）</p><p>HTTP 的请求标头分为四种： 通用标头、请求标头、响应标头 和 实体标头，依次来进行详解。</p><p>通用标头<br>通用标头主要有三个，分别是 Date、Cache-Control 和 Connection</p><p>Date</p><p>Date 是一个通用标头，它可以出现在请求标头和响应标头中，它的基本表示如下</p><p>Date: Wed, 21 Oct 2015 07:28:00 GMT<br>1<br>表示的是格林威治标准时间，这个时间要比北京时间慢八个小时</p><p>Cache-Control</p><p>Cache-Control 是一个通用标头，他可以出现在请求标头和响应标头中，Cache-Control 的种类比较多，虽然说这是一个通用标头，但是又一些特性是请求标头具有的，有一些是响应标头才有的。主要大类有 可缓存性、阈值性、 重新验证并重新加载 和其他特性</p><p>可缓存性是唯一响应标头才具有的特性，我们会在响应标头中详述。</p><p>阈值性，这个我翻译可能不准确，它的原英文是 Expiration，我是根据它的值来翻译的，你看到这些值可能会觉得我翻译的有点道理</p><p>max-age: 资源被认为仍然有效的最长时间，与 Expires 不同，这个请求是相对于 request标头的时间，而 Expires 是相对于响应标头。（请求标头）<br>s-maxage: 重写了 max-age 和 Expires 请求头，仅仅适用于共享缓存，被私有缓存所忽略（这块不理解，看完响应头的 Cache-Control 再进行理解）（请求标头）<br>max-stale：表示客户端将接受的最大响应时间，以秒为单位。（响应标头）<br>min-fresh: 表示客户端希望响应在指定的最小时间内有效。（响应标头）<br>Connection</p><p>Connection 决定当前事务（一次三次握手和四次挥手）完成后，是否会关闭网络连接。Connection 有两种，一种是持久性连接，即一次事务完成后不关闭网络连接</p><p>Connection: keep-alive<br>1<br>另一种是非持久性连接，即一次事务完成后关闭网络连接</p><p>Connection: close<br>1<br>HTTP1.1 其他通用标头如下</p><p>实体标头<br>实体标头是描述消息正文内容的 HTTP 标头。实体标头用于 HTTP 请求和响应中。头部Content-Length、 Content-Language、 Content-Encoding 是实体头。</p><p>Content-Length 实体报头指示实体主体的大小，以字节为单位，发送到接收方。<br>Content-Language 实体报头描述了客户端或者服务端能够接受的语言，例如<br>Content-Language: de-DE<br>Content-Language: en-US<br>Content-Language: de-DE, en-CA<br>1<br>2<br>3<br>Content-Encoding 这又是一个比较麻烦的属性，这个实体报头用来压缩媒体类型。Content-Encoding 指示对实体应用了何种编码。</p><p>常见的内容编码有这几种： gzip、compress、deflate、identity ，这个属性可以应用在请求报文和响应报文中</p><p>Accept-Encoding: gzip, deflate &#x2F;&#x2F;请求头<br>Content-Encoding: gzip  &#x2F;&#x2F;响应头<br>1<br>2<br>下面是一些实体标头字段</p><p>请求标头<br>上面给出的例子请求报文的属性比较少，下面给出一个 MDN 官网的例子</p><p>GET &#x2F;home.html HTTP&#x2F;1.1<br>Host: developer.mozilla.org<br>User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko&#x2F;20100101 Firefox&#x2F;50.0<br>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,<em>&#x2F;</em>;q&#x3D;0.8<br>Accept-Language: en-US,en;q&#x3D;0.5<br>Accept-Encoding: gzip, deflate, br<br>Referer: <a href="https://developer.mozilla.org/testpage.html">https://developer.mozilla.org/testpage.html</a><br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT<br>If-None-Match: “c561c68d0ba92bbeb8b0fff2a9199f722e3a621a”<br>Cache-Control: max-age&#x3D;0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>Host</p><p>Host 请求头指明了服务器的域名（对于虚拟主机来说），以及（可选的）服务器监听的TCP端口号。如果没有给定端口号，会自动使用被请求服务的默认端口（比如请求一个 HTTP 的 URL 会自动使用80作为端口）。</p><p>Host: developer.mozilla.org<br>1<br>上面的 Accpet、 Accept-Language、Accept-Encoding 都是属于内容协商的请求标头，我们会在下面说明</p><p>Referer</p><p>HTTP Referer 属性是请求标头的一部分，当浏览器向 web 服务器发送请求的时候，一般会带上 Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p><p>Referer: <a href="https://developer.mozilla.org/testpage.html">https://developer.mozilla.org/testpage.html</a><br>1<br>Upgrade-Insecure-Requests</p><p>Upgrade-Insecure-Requests 是一个请求标头，用来向服务器端发送信号，表示客户端优先选择加密及带有身份验证的响应。</p><p>Upgrade-Insecure-Requests: 1<br>1<br>If-Modified-Since</p><p>HTTP 的 If-Modified-Since 使其成为条件请求：</p><p>返回200，只有在给定日期的最后一次修改资源后，服务器才会以200状态发送回请求的资源。<br>如果请求从开始以来没有被修改过，响应会返回304并且没有任何响应体<br>If-Modified-Since 通常会与 If-None-Match 搭配使用，If-Modified-Since 用于确认代理或客户端拥有的本地资源的有效性。获取资源的更新日期时间，可通过确认首部字段 Last-Modified 来确定。</p><p>大白话说就是如果在 Last-Modified 之后更新了服务器资源，那么服务器会响应200，如果在 Last-Modified 之后没有更新过资源，则返回 304。</p><p>If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT<br>1<br>If-None-Match</p><p>If-None-Match HTTP请求标头使请求成为条件请求。 对于 GET 和 HEAD 方法，仅当服务器没有与给定资源匹配的 ETag 时，服务器才会以200状态发送回请求的资源。 对于其他方法，仅当最终现有资源的ETag与列出的任何值都不匹配时，才会处理请求。</p><p>If-None-Match: “c561c68d0ba92bbeb8b0fff2a9199f722e3a621a”<br>1<br>ETag 属于响应标头，后面进行介绍。</p><p>内容协商<br>内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的标准。</p><p>内容协商主要有以下3种类型：</p><p>服务器驱动协商（Server-driven Negotiation）<br>这种协商方式是由服务器端进行内容协商。服务器端会根据请求首部字段进行自动处理</p><p>客户端驱动协商（Agent-driven Negotiation）<br>这种协商方式是由客户端来进行内容协商。</p><p>透明协商（Transparent Negotiation）<br>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</p><p>内容协商的分类有很多种，主要的几种类型是 Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language。</p><p>Accept</p><p>接受请求 HTTP 标头会通告客户端其能够理解的 MIME 类型</p><p>那么什么是 MIME 类型呢？在回答这个问题前你应该先了解一下什么是 MIME</p><p>MIME: MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p><p>也就是说，MIME 类型其实就是一系列消息内容类型的集合。那么 MIME 类型都有哪些呢？</p><p>文本文件： text&#x2F;html、text&#x2F;plain、text&#x2F;css、application&#x2F;xhtml+xml、application&#x2F;xml</p><p>图片文件： image&#x2F;jpeg、image&#x2F;gif、image&#x2F;png</p><p>视频文件： video&#x2F;mpeg、video&#x2F;quicktime</p><p>应用程序二进制文件： application&#x2F;octet-stream、application&#x2F;zip</p><p>比如，如果浏览器不支持 PNG 图片的显示，那 Accept 就不指定image&#x2F;png，而指定可处理的 image&#x2F;gif 和 image&#x2F;jpeg 等图片类型。</p><p>一般 MIME 类型也会和 q 这个属性一起使用，q 是什么？q 表示的是权重，来看一个例子</p><p>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,<em>&#x2F;</em>;q&#x3D;0.8<br>1<br>这是什么意思呢？若想要给显示的媒体类型增加优先级，则使用 q&#x3D; 来额外表示权重值，没有显示权重的时候默认值是1.0 ，我给你列个表格你就明白了</p><p>qMIME<br>1.0text&#x2F;html<br>1.0application&#x2F;xhtml+xml<br>0.9application&#x2F;xml<br>0.8* &#x2F; *<br>也就是说，这是一个放置顺序，权重高的在前，低的在后，application&#x2F;xml;q&#x3D;0.9 是不可分割的整体。</p><p>Accept-Charset</p><p>accept-charset 属性规定服务器处理表单数据所接受的字符集。</p><p>accept-charset 属性允许您指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。</p><p>该属性的值是用引号包含字符集名称列表。如果可接受字符集与用户所使用的字符即不相匹配的话，浏览器可以选择忽略表单或是将该表单区别对待。</p><p>此属性的默认值是 unknown，表示表单的字符集与包含表单的文档的字符集相同。</p><p>常用的字符集有： UTF-8 - Unicode 字符编码 ； ISO-8859-1 - 拉丁字母表的字符编码</p><p>Accept-Language</p><p>首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集（指中文或英文等），以及自然语言集的相对优先级。可一次指定多种自然语言集。<br>和 Accept 首部字段一样，按权重值 q来表示相对优先级。</p><p>Accept-Language: en-US,en;q&#x3D;0.5<br>1<br>请求标头我们大概就介绍这几种，后面会有一篇文章详细深挖所有的响应头的，下面是一个响应头的汇总，基于 HTTP 1.1</p><p>响应标头<br>响应标头是可以在 HTTP 响应种使用的 HTTP 标头，这听起来是像一句废话，不过确实是这样解释。并不是所有出现在响应中的标头都是响应标头。还有一些特殊的我们上面说过，有通用标头和实体标头也会出现在响应标头中，比如 Content-Length 就是一个实体标头，但是，在这种情况下，这些实体请求通常称为响应头。下面以一个例子为例和你探讨一下响应头</p><p>200 OK<br>Access-Control-Allow-Origin: *<br>Connection: Keep-Alive<br>Content-Encoding: gzip<br>Content-Type: text&#x2F;html; charset&#x3D;utf-8<br>Date: Mon, 18 Jul 2016 16:06:00 GMT<br>Etag: “c561c68d0ba92bbeb8b0f612a9199f722e3a621a”<br>Keep-Alive: timeout&#x3D;5, max&#x3D;997<br>Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT<br>Server: Apache<br>Set-Cookie: mykey&#x3D;myvalue; expires&#x3D;Mon, 17-Jul-2017 16:06:00 GMT; Max-Age&#x3D;31449600; Path&#x3D;&#x2F;; secure<br>Transfer-Encoding: chunked<br>Vary: Cookie, Accept-Encoding<br>x-frame-options: DENY<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>响应状态码</p><p>首先出现的应该就是 200 OK，这是 HTTP 响应标头的状态码，它表示着响应成功完成。HTTP 响应标头的状态码有很多，并做了如下规定</p><p>以 2xx 为开头的都表示请求成功响应。</p><p>状态码含义<br>200成功响应<br>204请求处理成功，但是没有资源可以返回<br>206对资源某一部分进行响应，由Content-Range 指定范围的实体内容。<br>以 3xx 为开头的都表示需要进行附加操作以完成请求</p><p>状态码含义<br>301永久性重定向，该状态码表示请求的资源已经重新分配 URI，以后应该使用资源现有的 URI<br>302临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。<br>303该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。<br>304该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。<br>307临时重定向。该状态码与 302 Found 有着相同的含义。<br>以 4xx 的响应结果表明客户端是发生错误的原因所在。</p><p>状态码含义<br>400该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。<br>401该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。<br>403该状态码表明对请求资源的访问被服务器拒绝了。<br>404该状态码表明服务器上无法找到请求的资源。<br>以 5xx 为开头的响应标头都表示服务器本身发生错误</p><p>状态码含义<br>500该状态码表明服务器端在执行请求时发生了错误。<br>503该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。<br>Access-Control-Allow-Origin</p><p>一个返回的 HTTP 标头可能会具有 Access-Control-Allow-Origin ，Access-Control-Allow-Origin 指定一个来源，它告诉浏览器允许该来源进行资源访问。 否则-对于没有凭据的请求 *通配符，告诉浏览器允许任何源访问资源。例如，要允许源 <a href="https://mozilla.org/">https://mozilla.org</a> 的代码访问资源，可以指定：</p><p>Access-Control-Allow-Origin: <a href="https://mozilla.org/">https://mozilla.org</a><br>Vary: Origin<br>1<br>2<br>如果服务器指定单个来源而不是 *通配符的话 ，则服务器还应在 Vary 响应标头中包含 Origin ，以向客户端指示 服务器响应将根据原始请求标头的值而有所不同。</p><p>Keep-Alive</p><p>上面我们提到，HTTP 报文标头会分为四种，这其实是按着上下文来分类的</p><p>还有一种分类是根据代理进行分类，根据代理会分为端到端头 和 逐跳标头</p><p>而 Keep-Alive 表示的是 Connection 非持续连接的存活时间，如下</p><p>Connection: Keep-Alive<br>Keep-Alive: timeout&#x3D;5, max&#x3D;997<br>1<br>2<br>Keep-Alive 有两个参数，它们是以逗号分隔的参数列表，每个参数由一个标识符和一个由等号 &#x3D; 分隔的值组成。</p><p>timeout：指示空闲连接必须保持打开状态的最短时间（以秒为单位）。</p><p>max：指示在关闭连接之前可以在此连接上发送的最大请求数。</p><p>上述 HTTP 代码的意思就是限制最大的超时时间是 5s 和 最大的连接请求是 997 个。</p><p>Server</p><p>服务器标头包含有关原始服务器用来处理请求的软件的信息。</p><p>应该避免使用过于冗长和详细的 Server 值，因为它们可能会泄露内部实施细节，这可能会使攻击者容易地发现并利用已知的安全漏洞。例如下面这种写法</p><p>Server: Apache&#x2F;2.4.1 (Unix)<br>1<br>Set-Cookie</p><p>Cookie 又是另外一个领域的内容了，我们后面文章会说道 Cookie，这里需要记住 Cookie、Set-Cookie 和 Content-Disposition 等在其他 RFC 中定义的首部字段，它们不是属于 HTTP 1.1 的首部字段，但是使用率仍然很高。</p><p>Transfer-Encoding</p><p>首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。</p><p>Transfer-Encoding: chunked<br>1<br>HTTP &#x2F;1.1 的传输编码方式仅对分块传输编码有效。</p><p>X-Frame-Options</p><p>HTTP 首部字段是可以自行扩展的。所以在 Web 服务器和浏览器的应用上，会出现各种非标准的首部字段。</p><p>首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防止点击劫持（clickjacking）攻击。</p><p>下面是一个响应头的汇总，基于 HTTP 1.1</p><p>非 HTTP&#x2F;1.1 首部字段<br>在 HTTP 协议通信交互中使用到的首部字段，不限于 RFC2616 中定义的 47 种首部字段。还有 Cookie、Set-Cookie 和 Content-Disposition 等在其他 RFC 中定义的首部字段，它们的使用频率也很高。<br>这些非正式的首部字段统一归纳在 RFC4229 HTTP Header Field Registrations 中。</p><p>End-to-end 首部和 Hop-by-hop 首部<br>HTTP 首部字段将定义成缓存代理和非缓存代理的行为，分成 2 种类型。</p><p>一种是 End-to-end 首部 和 Hop-by-hop 首部</p><p>End-to-end（端到端） 首部<br>这些标头必须发送给消息的最终接收者 : 请求的服务器，或响应的客户端。中间代理必须重新传输未经修改的标头，并且缓存必须存储这些信息</p><p>Hop-by-hop（逐跳） 首部<br>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。</p><p>下面列举了 HTTP&#x2F;1.1 中的逐跳首部字段。除这 8 个首部字段之外，其他所有字段都属于端到端首部。</p><p>Connection、Keep-Alive、Proxy-Authenticate、Proxy-Authorization、Trailer、TE、Transfer-Encoding、Upgrade</p><p>HTTP 的优点和缺点<br>HTTP 的优点<br>简单灵活易扩展<br>HTTP 最重要也是最突出的优点是 简单、灵活、易于扩展。</p><p>HTTP 的协议比较简单，它的主要组成就是 header + body，头部信息也是简单的文本格式，而且 HTTP 的请求报文根据英文也能猜出来个大概的意思，降低学习门槛，能够让更多的人研究和开发 HTTP 应用。</p><p>所以，在简单的基础上，HTTP 协议又多了灵活 和 易扩展 的优点。</p><p>HTTP 协议里的请求方法、URI、状态码、原因短语、头字段等每一个核心组成要素都没有被制定死，允许开发者任意定制、扩充或解释，给予了浏览器和服务器最大程度的信任和自由。</p><p>应用广泛、环境成熟<br>因为过于简单，普及，因此应用很广泛。因为 HTTP 协议本身不属于一种语言，它并不限定某种编程语言或者操作系统，所以天然具有跨语言、跨平台的优越性。而且，因为本身的简单特性很容易实现，所以几乎所有的编程语言都有 HTTP 调用库和外围的开发测试工具。</p><p>随着移动互联网的发展， HTTP 的触角已经延伸到了世界的每一个角落，从简单的 Web 页面到复杂的 JSON、XML 数据，从台式机上的浏览器到手机上的各种 APP、新闻、论坛、购物、手机游戏，你很难找到一个没有使用 HTTP 的地方。</p><p>无状态<br>无状态其实既是优点又是缺点。因为服务器没有记忆能力，所以就不需要额外的资源来记录状态信息，不仅实现上会简单一些，而且还能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。</p><p>HTTP 的缺点<br>无状态<br>既然服务器没有记忆能力，它就无法支持需要连续多个步骤的事务操作。每次都得问一遍身份信息，不仅麻烦，而且还增加了不必要的数据传输量。由此出现了 Cookie 技术。</p><p>明文<br>HTTP 协议里还有一把优缺点一体的双刃剑，就是明文传输。明文意思就是协议里的报文（准确地说是 header 部分）不使用二进制数据，而是用简单可阅读的文本形式。</p><p>对比 TCP、UDP 这样的二进制协议，它的优点显而易见，不需要借助任何外部工具，用浏览器、Wireshark 或者 tcpdump 抓包后，直接用肉眼就可以很容易地查看或者修改，为我们的开发调试工作带来极大的便利。</p><p>当然缺点也是显而易见的，就是不安全，可以被监听和被窥探。因为无法判断通信双方的身份，不能判断报文是否被更改过。</p><p>性能<br>————————————————<br>版权声明：本文为CSDN博主「程序员cxuan」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_36894974/article/details/103930478">https://blog.csdn.net/qq_36894974/article/details/103930478</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo添加Button</title>
    <link href="/2022/07/08/Fluid-button-use/"/>
    <url>/2022/07/08/Fluid-button-use/</url>
    
    <content type="html"><![CDATA[<h1 id="1-hexo添加Button方法"><a href="#1-hexo添加Button方法" class="headerlink" title="1.hexo添加Button方法"></a>1.hexo添加Button方法</h1><p>你可以在 markdown 中加入如下的代码来使用 Button：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">&#123;% btn url, text, title %&#125; <br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>url：跳转链接<br>text：显示的文字<br>title：鼠标悬停时显示的文字（可选） </p><p class="note primary">tags</p>  长河落日袁先生  <p class="note success">success</p> <p><img src="/../img/wallhaven-e7ek7k.jpg" alt="alt">  </p><p><a href="https://www.baidu.com/">百度一下</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试基础面试题</title>
    <link href="/2022/07/08/mianshiya/"/>
    <url>/2022/07/08/mianshiya/</url>
    
    <content type="html"><![CDATA[<h1 id="1、软件测试流程"><a href="#1、软件测试流程" class="headerlink" title="1、软件测试流程"></a>1、软件测试流程</h1><ul><li>需求评审</li><li>测试计划编写</li><li>测试用例编写</li><li>测试用例评审</li><li>执行测试用例(搭建测试环境)</li><li>编写测试报告</li></ul><h1 id="2、缺陷定义"><a href="#2、缺陷定义" class="headerlink" title="2、缺陷定义"></a>2、缺陷定义</h1><ul><li>需求要求的功能没有实现</li><li>实现了需求没有要求的功能（画蛇添足）  </li><li>软件中出现了指明不应出现的错误  </li><li>需求虽未明确指明，但是应该实现的功能没有实现</li></ul><h1 id="3、黑盒测试用例设计方法"><a href="#3、黑盒测试用例设计方法" class="headerlink" title="3、黑盒测试用例设计方法"></a>3、黑盒测试用例设计方法</h1><ul><li>等价类划分法 <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">用户名长度为6<span class="hljs-string">-10</span>位<br>有效输入：6<span class="hljs-string">-10</span>    可以穷举<br>无效输入：&lt;6   可以穷举，&gt;10   穷举？？？？ <br></code></pre></td></tr></table></figure></li><li>边界值  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bnf">用户名长度为6-10位<br>有效边界值：6、7、8、9、10<br>无效边界值：<span class="hljs-attribute">&lt;6   和 &gt;</span>10<br></code></pre></td></tr></table></figure></li><li>场景分析法(ATM取款)  </li><li>正交表法  </li><li>状态迁移法<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">明确需求中有多少个状态  <br>比如订单状态：待发货、已发货、签收、申请取消、拒收等<br></code></pre></td></tr></table></figure></li><li>判定表  <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">某系统对修改密码有如下要求：首先输入原密码，原密码正确后才能输入新密码与确认密码，否则系统提示原密码错误。输入新密码与确认密码，检查通过后修改密码成功。新密码要求6<span class="hljs-string">-10</span>位，由字母+数字组成，如果不合法提示新密码不满足复杂度要求；如果确认密码与新密码不一致，提示确认密码必须与新密码一致。请使用判定表法编写测试用例。<br></code></pre></td></tr></table></figure></li></ul><h1 id="4、六大测试分类"><a href="#4、六大测试分类" class="headerlink" title="4、六大测试分类"></a>4、六大测试分类</h1><ul><li>功能性测试（Functionality）：关注功能是否正确。  </li><li>可用性测试（Usability）：关注产品是否好用。  </li><li>兼容性测试（Compatibility）：关注产品是否适用多种平台。  </li><li>可靠性测试（Reliability）：关注产品是否稳定可靠。  </li><li>安全性测试（Security）：关注产品是否存在漏洞。  </li><li>性能测试（Performance）：关注产品是否能够高效运行。</li></ul><h1 id="5、测试用例包含那些内容"><a href="#5、测试用例包含那些内容" class="headerlink" title="5、测试用例包含那些内容"></a>5、测试用例包含那些内容</h1><ul><li>测试用例编号  </li><li>测试用例标题  </li><li>前置条件    </li><li>测试用例操作步骤  </li><li>预期结果  </li><li>优先级</li></ul><h1 id="6、怎么保证测试覆盖率"><a href="#6、怎么保证测试覆盖率" class="headerlink" title="6、怎么保证测试覆盖率"></a>6、怎么保证测试覆盖率</h1><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gcode">测试用例覆盖率很难达到<span class="hljs-number">100</span><span class="hljs-meta">%</span>，越复杂的功能越难保证，只能说尽量提高测试覆盖率。<br>通过以下手段可以提高覆盖率：<br><span class="hljs-comment">(1)</span>编写测试用例前，检查相关需求、设计文档是否有问题（功能描述不清，设计逻辑缺陷），如有问题找相关设计或者产品问清楚。<br><span class="hljs-comment">(2)</span>功能列表包含新增和修改功能点，性能需求也要列出来（因为要整理对应的性能测试用例），同时还需要对既有功能进行一个梳理，检查是否会与其他功能有交互，整理出影响点。<br><span class="hljs-comment">(3)</span>把功能列表发给组员，并找时间进行会议评审，主要对功能等进行查漏补缺。<br><span class="hljs-comment">(4)</span>最后才行进测试用例编写，注意编写规范。<br><span class="hljs-comment">(5)</span>编写完毕后，把测试用例发给组员，开会进行评审，主要对检查点、用例规范进行查漏补缺。<br><span class="hljs-comment">(6)</span>执行测试用例过程中，发现用例不完善或者错误，需对测试用例进行及时的修改与调优<br><span class="hljs-comment">(7)</span>测试完毕后对漏测的bug进行测试用例补充。<br>```  <br><br><span class="hljs-attr"># 7</span>、软件测试方法  <br>- 按是否清楚程序的内部逻辑：白盒测试、灰盒测试、黑盒测试<br>- 按测试执行的方式：手工测试、自动化测试<br>- 按是否允许被测软件：静态测试、动态测试  <br><br><span class="hljs-attr"># 8</span>、开发对缺陷不认可如何处理  <br></code></pre></td></tr></table></figure><p>(1)检查提交的BUG描述是否清楚、是否复现<br>(2)查阅需求、设计文档看是否有对该问题有描述，如果没有查看类似软件是否存在该问题<br>(3)如果还是不能将情况汇报给领导，并说明BUG的情况以及自己认为是BUG的理由</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 9、BUG不可复现怎么办  </span><br>先在出现该问题上的环境上尽量重现，保持浏览器、账号、操作步骤环境一致。如果还是不能重现，把<span class="hljs-keyword">bug记录到BUG管理平台，详细记录BUG的操作步骤、特征、环境账号、操作截图、出现错误截图和日志截图等，并注明是偶现。如果BUG优先级比较高，项目时间允许，让开发协助重现。如果项目时间不允许，记录到BUG管理平台后续跟进。</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># 10、如何判断BUG是前端还是后端问题</span><br></code></pre></td></tr></table></figure><p>(1)界面：文字错误、排版混乱、兼容问题前端问题<br>(2)通过抓包对接口返回信息进行分析，分析出缺陷一般为后端问题<br>(3)后端查看日志</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 11、接口测试流程</span><br><span class="hljs-bullet">-</span> 获取接口文档、分析接口<br><span class="hljs-bullet">-</span> 编写接口测试用例<br><span class="hljs-bullet">-</span> 测试用例评审<br><span class="hljs-bullet">-</span> 执行测试用例(添加线程组、添加HTTP请求，根据接口文档填写相关请求参数、参数值，断言、添加查看结果树，看接口返回信息以预期信息是否一致)<br><span class="hljs-bullet">-</span> 提交、跟踪缺陷和回归测试<br><span class="hljs-bullet">-</span> 编写测试报告<br><br><span class="hljs-section"># 12、测试报告内容</span><br><span class="hljs-bullet">-</span> 测试范围  <br><span class="hljs-bullet">-</span> 测试时间<br><span class="hljs-bullet">-</span> 测试人员<br><span class="hljs-bullet">-</span> 测试策略<br><span class="hljs-bullet">-</span> 缺陷统计与分析<br><span class="hljs-bullet">-</span> 上线风险<br><span class="hljs-bullet">-</span> 遗留问题<br><span class="hljs-bullet">-</span> 测试是否通过<br><br><span class="hljs-section"># 13、职业规划  </span><br></code></pre></td></tr></table></figure><ul><li>短期学习公司的业务，然后上手自己的工作，做好自己的本职工作，适应公司节奏</li><li>长期来看，我会根据公司的发展需要继续提升自己的某项专业能力，把学习到的测试技能更好的应用到工作中去<figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># 14、说出自己的缺点  </span><br><br>虽然已经有两年的工作经历，但是还是认为自己的经验还不是很丰富，后期呢我也会多多加深自己的测试技术。<br><br><br><span class="hljs-comment"># 15、做测试自己最大的优势  </span><br>(1)站在客户的角度思考问题，好的技术人员除了技术过硬外，还要懂得从用户的角度出发，要了解用户，所以我在工作中，揣摩用户的使用习惯，表达自己对产品的使用感受，在测试过程中除了提交BUG，也会偶尔反馈一些优化建议。  <br><br>(2)比较有责任心。领导交付给我一个任务。每天下班之前反馈进度，保证项目进度。遇到问题主动去协调不同部门的同事解决问题。<br><br><br><span class="hljs-comment"># 16、UI自动化元素过程中定位不到的原因  </span><br><span class="hljs-literal">-</span> 元素表达式编写错误  <br><span class="hljs-literal">-</span> 元素未完全加载出来 <br><span class="hljs-literal">-</span> 元素嵌套在iframe中  <br><span class="hljs-literal">-</span> 元素在新窗口中<br><span class="hljs-literal">-</span> 脚本流程与实际流程不符合<br><span class="hljs-literal">-</span> 元素不在当前页  <br><br><span class="hljs-comment"># 17、UI自动化八种定位方式  </span><br><span class="hljs-literal">-</span> id<br><span class="hljs-literal">-</span> name<br><span class="hljs-literal">-</span> class_name、<br><span class="hljs-literal">-</span> tag_name(标签名称)、<br><span class="hljs-literal">-</span> link_text(定位a标签)、<br><span class="hljs-literal">-</span> partial_link_text(定位a标签模糊)、<br><span class="hljs-literal">-</span> Xpath(基于路径定位)<br><span class="hljs-literal">-</span> css(元素选择器)<br><br><span class="hljs-comment"># 18、UI自动化三种等待方式</span><br><span class="hljs-literal">-</span> 强制等待<br>如sleep(5)，一定会等待5秒才会继续执行下面的代码<br><br><span class="hljs-literal">-</span> 显示等待<br>只针对当前元素，在指定条件内不断查找元素，直到找到元素或者超时报错<br><br><span class="hljs-literal">-</span> 隐式等待  <br>在指定的时间范围内查找元素，直到找到元素或者超时(报错 no suchelement)，特点是全局的  <br><br><span class="hljs-comment"># 19、UI自动化测试框架组成结构</span><br><span class="hljs-literal">-</span> 测试用例/测试数据<br><span class="hljs-literal">-</span> 基础方法（包含PO分层，数据驱动）<br><span class="hljs-literal">-</span> 工具包<br><span class="hljs-literal">-</span> 测试报告<br><span class="hljs-literal">-</span> 测试日志<br><br><span class="hljs-comment"># 20、PO模式  </span><br>减少代码重复，增加代码可读性，更容易维护。包含对象层、操作层、业务层。<br><span class="hljs-literal">-</span> 封装driver<br><span class="hljs-literal">-</span> 封装页面元素定位方法  <br><span class="hljs-literal">-</span> 封装页面元素操作，如输入用户名、密码等<br><span class="hljs-literal">-</span> 根据封装页面元素操作方法组合成业务<br><br><span class="hljs-comment"># 21、linux常用命令 </span><br></code></pre></td></tr></table></figure>tail -f #查看日志文件<br>cd #切换目录<br>ls #查看当前目录文件<br>df #查看磁盘使用情况<br>top #查看服务器资源使用情况<br>ps  #查看进程使用情况<br>netstat #查看端口占用情况<br>find #查找<br>cp #复制<br>tar #解压缩<br>mv #重命名<br>kill #<br>gerp #查找文档<br>vi #功能强大的纯文本编辑器<br>unzip #解压缩<br>mkdir #创建文件<br>touch #创建新的空文件<br>tail -n 100 filename #查看文件100行<br>head -n 200filename |tail -n 100  #查看文件100行到200行<br>chmod #用来变更文件或目录的权限<br>cat  #显示文件内容<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 22、印象最深的BUG</span><br>(1)登录页面，输入密码后，点击密码明文显示后，点击登录提示密码错误。前端页面发现密码并没有错误。后通过抓包将密码MD5解密后发现密码少了一位。最后得出输入密码后点击密码明文显示后密码会自动减少一位<br><br>(2)最近测试的商城项目，员工为销售的订单管理页面，查看订单详情，将URL中的订单更改为其他销售下的订单号，然后可以成功查看其他销售下的订单详情。  <br><br><span class="hljs-comment"># 23、问面试官的问题  </span><br><span class="hljs-bullet">-</span> <span class="hljs-string">薪资组成结构</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">试用期缴纳社保吗</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">12薪还是13薪等</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">工作内容是啥</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">入职是否有培训？公司是否提供专业学习机会</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">请问您在贵公司工作多久了</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">考核方式</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">问团队气氛，了解你的公司</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">比如:咱们团队多少人？工作年限大概是多久呀？</span><br>![question](https://itcttme96-bucket.oss-cn-shenzhen.aliyuncs.com/img/question_20220523002610.jpg)<br>问题：面试的最后，面试官会说你有什么要问我的吗？那么我们需要注意哪些？<br>答：<br>1）不要问跟工作无关的问题。<br>2）问工作内容，明确你的职能。<br>比如：如果得到这份工作，以后谁来带我呢？<br>如果成为贵公司的一员，你们希望我短期内解决什么问题呢？<br>未来一年，我们部门的工作目标是什么？<br>岗位的主要职责我已经明白了，公司对我还有什么其他的要求吗？<br>3)问工作潜力，打听你的未来<br>比如:入职后的几个月，我会参加哪些培训呢？<br>这个岗位在咱们公司的晋升路径是什么样的？<br>您对我这个岗位三到五年的职责规划有什么建议吗？<br>4)问团队气氛，了解你的公司<br>比如:咱们团队多少人？工作年限大概是多久呀？<br>您觉得最能代表咱们公司的员工是怎样的呢？<br>能带我参观一下咱们的办公区域吗？<br>5)问工作体验，拉近跟面试官的距离<br>您在这里工作多久了？<br>您最喜欢这家公司的什么地方？最不喜欢什么地方？<br>能给我大概讲讲公司的企业文化吗？<br>能给我举一个公司团队合作的例子吗？<br>如果再给您一次机会，您还会选择这家公司吗？<br><br><br><span class="hljs-comment">## 24、产品上线标准 </span><br><span class="hljs-bullet">-</span> <span class="hljs-string">测试用例是否全部百分之百执行完毕，如果还有未执行完毕的用例，是什么原因没有全部执行完，例如时间的原因，或者是优先级比较低的一个应用性测试用例</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">剩余的bug数量和严重程度的这个等级要达到一定的标准，比如说不存在致命性、严重程度的这样一个bug，建议或不影响使用的遗留问题需要经过产品经理和测试经理协同制定这个可用的一个数量</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">上线前的最后回归测试是否完成</span><br><br><span class="hljs-comment">## 25、遇到frame框架页面怎么处理</span><br>问:遇到frame框架页面怎么处理?  <br><span class="hljs-attribute">答</span><span class="hljs-punctuation">:  </span><br>1.先定位到frame;  <br>2.再用driver.switch_to.frame()跳转进frame进行操作;  <br>3.操作完后使用  <br>driver.swith_to.default_content()跳转出来frame  <br><br><span class="hljs-comment">## 26、UI自动化测试用例怎么设计 </span><br>![UI自动化测试用例怎么设计](https://itcttme96-bucket.oss-cn-shenzhen.aliyuncs.com/img/UI01202205191303315.jpg)<br><br><span class="hljs-comment">## 27、如何去提升UI自动化测试用例的稳定性?</span><br><span class="hljs-attribute">答</span><span class="hljs-punctuation">:  </span><br>1.使用xpath表达式定位元素时，使用相对路径;  <br>2.定位元素时尽量使用显式等待，等要操作的元素出现之后再执行下面的操作;  <br>3.多用try捕获异常、处理异常;    <br>4.降低用例间的耦合;  <br>5.尽量使用单独的测试环境，避免其他类型的测试同步进行，对数据造成干扰;  <br>6.脚本执行失败后加入重试机制;  <br>7.用例执行结束后对测试场景进行还原，避免影响其他测试用例的执行  <br><br><span class="hljs-comment"># 28、元素定位到了，却点击无效(也没报错），如何解决?</span><br>答:可以使用js进行点击操作例如:  <br></code></pre></td></tr></table></figure>js &#x3D; ‘document.getElementByld(“baidu”).click()’<br>driver.execute_script(js)</li></ul><pre><code class="hljs"># 29、微信视频聊天测试点[传送门](https://blog.csdn.net/weixin_44369212/article/details/109481014)![](https://img-blog.csdnimg.cn/20201103223433596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM2OTIxMg==,size_16,color_FFFFFF,t_70)</code></pre>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
